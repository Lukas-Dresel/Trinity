# The file was automatically generated by Lark v0.6.5
#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser with a standard lexer
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark.
#
#    It is licensed under GPLv2 or above.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, contact me via email.
#
#    If GPL is incompatible with your free or open-source project,
#    contact me and we'll work it out (for free).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    See <http://www.gnu.org/licenses/>.
#
#

class LarkError(Exception):
    pass

class GrammarError(LarkError):
    pass

class ParseError(LarkError):
    pass

class LexError(LarkError):
    pass

class UnexpectedInput(LarkError):
    pos_in_stream = None

    def get_context(self, text, span=40):
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        before = text[start:pos].rsplit('\n', 1)[-1]
        after = text[pos:end].split('\n', 1)[0]
        return before + after + '\n' + ' ' * len(before) + '^\n'

    def match_examples(self, parse_fn, examples):
        """ Given a parser instance and a dictionary mapping some label with
            some malformed syntax examples, it'll return the label for the
            example that bests matches the current error.
        """
        assert self.state is not None, "Not supported for this exception"

        candidate = None
        for label, example in examples.items():
            assert not isinstance(example, STRING_TYPE)

            for malformed in example:
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        try:
                            if ut.token == self.token:  # Try exact match first
                                return label
                        except AttributeError:
                            pass
                        if not candidate:
                            candidate = label

        return candidate


class UnexpectedCharacters(LexError, UnexpectedInput):
    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None):
        message = "No terminal defined for '%s' at line %d col %d" % (seq[lex_pos], line, column)

        self.line = line
        self.column = column
        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.pos_in_stream = lex_pos
        self.state = state

        message += '\n\n' + self.get_context(seq)
        if allowed:
            message += '\nExpecting: %s\n' % allowed

        super(UnexpectedCharacters, self).__init__(message)



class UnexpectedToken(ParseError, UnexpectedInput):
    def __init__(self, token, expected, considered_rules=None, state=None):
        self.token = token
        self.expected = expected     # XXX str shouldn't necessary
        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.considered_rules = considered_rules
        self.state = state
        self.pos_in_stream = getattr(token, 'pos_in_stream', None)

        message = ("Unexpected token %r at line %s, column %s.\n"
                   "Expected one of: \n\t* %s\n"
                   % (token, self.line, self.column, '\n\t* '.join(self.expected)))

        super(UnexpectedToken, self).__init__(message)


try:
    STRING_TYPE = basestring
except NameError:   # Python 3
    STRING_TYPE = str


import types
from functools import wraps, partial
from contextlib import contextmanager

Str = type(u'')

def smart_decorator(f, create_decorator):
    if isinstance(f, types.FunctionType):
        return wraps(f)(create_decorator(f, True))

    elif isinstance(f, (type, types.BuiltinFunctionType)):
        return wraps(f)(create_decorator(f, False))

    elif isinstance(f, types.MethodType):
        return wraps(f)(create_decorator(f.__func__, True))

    elif isinstance(f, partial):
        # wraps does not work for partials in 2.7: https://bugs.python.org/issue3445
        return create_decorator(f.__func__, True)

    else:
        return create_decorator(f.__func__.__call__, True)



class Meta:
    pass

class Tree(object):
    def __init__(self, data, children, meta=None):
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self):
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%s, %s)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            return [ indent_str*level, self._pretty_label(), '\t', '%s' % (self.children[0],), '\n']

        l = [ indent_str*level, self._pretty_label(), '\n' ]
        for n in self.children:
            if isinstance(n, Tree):
                l += n._pretty(level+1, indent_str)
            else:
                l += [ indent_str*(level+1), '%s' % (n,), '\n' ]

        return l

    def pretty(self, indent_str='  '):
        return ''.join(self._pretty(0, indent_str))
    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash((self.data, tuple(self.children)))

from inspect import getmembers, getmro

class Discard(Exception):
    pass

# Transformers

class Transformer:
    """Visits the tree recursively, starting with the leaves and finally the root (bottom-up)

    Calls its methods (provided by user via inheritance) according to tree.data
    The returned value replaces the old one in the structure.

    Can be used to implement map or reduce.
    """

    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            if getattr(f, 'meta', False):
                return f(children, tree.meta)
            elif getattr(f, 'inline', False):
                return f(*children)
            elif getattr(f, 'whole_tree', False):
                if new_children is not None:
                    raise NotImplementedError("Doesn't work with the base Transformer class")
                return f(tree)
            else:
                return f(children)

    def _transform_children(self, children):
        for c in children:
            try:
                yield self._transform_tree(c) if isinstance(c, Tree) else c
            except Discard:
                pass

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree):
        return self._transform_tree(tree)

    def __mul__(self, other):
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        "Default operation on tree (for override)"
        return Tree(data, children, meta)

    @classmethod
    def _apply_decorator(cls, decorator, **kwargs):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):
            if name.startswith('_') or name in libmembers:
                continue

            if isinstance(cls.__dict__[name], (staticmethod, classmethod)):
                kwargs['static'] = True
            setattr(cls, name, decorator(value, **kwargs))
        return cls


class InlineTransformer(Transformer):   # XXX Deprecated
    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(object):
    def __init__(self, *transformers):
        self.transformers = transformers

    def transform(self, tree):
        for t in self.transformers:
            tree = t.transform(tree)
        return tree

    def __mul__(self, other):
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer):
    "Non-recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):           # Cancel recursion
        return self._call_userfunc(tree)

    def transform(self, tree):
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_InPlaceRecursive(Transformer):
    "Recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)



# Visitors

class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        "Default operation on tree (for override)"
        return tree


class Visitor(VisitorBase):
    """Bottom-up visitor, non-recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """


    def visit(self, tree):
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

class Visitor_Recursive(VisitorBase):
    """Bottom-up visitor, recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """

    def visit(self, tree):
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        f = getattr(self, tree.data, self.__default__)
        f(tree)
        return tree



def visit_children_decor(func):
    "See Interpreter"
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner


class Interpreter:
    """Top-down visitor, recursive

    Visits the tree, starting with the root and finally the leaves (top-down)
    Calls its methods (provided by user via inheritance) according to tree.data

    Unlike Transformer and Visitor, the Interpreter doesn't automatically visit its sub-branches.
    The user has to explicitly call visit_children, or use the @visit_children_decor
    """
    def visit(self, tree):
        return getattr(self, tree.data)(tree)

    def visit_children(self, tree):
        return [self.visit(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)




# Decorators

def _apply_decorator(obj, decorator, **kwargs):
    try:
        _apply = obj._apply_decorator
    except AttributeError:
        return decorator(obj, **kwargs)
    else:
        return _apply(decorator, **kwargs)



def _inline_args__func(func):
    @wraps(func)
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, children):
                return _f(self, *children)
        else:
            def f(self, children):
                return _f(*children)
        return f

    return smart_decorator(func, create_decorator)


def inline_args(obj):   # XXX Deprecated
    return _apply_decorator(obj, _inline_args__func)



def _visitor_args_func_dec(func, inline=False, meta=False, whole_tree=False, static=False):
    assert [whole_tree, meta, inline].count(True) <= 1
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, *args, **kwargs):
                return _f(self, *args, **kwargs)
        else:
            def f(self, *args, **kwargs):
                return _f(*args, **kwargs)
        return f

    if static:
        f = wraps(func)(create_decorator(func, False))
    else:
        f = smart_decorator(func, create_decorator)
    f.inline = inline
    f.meta = meta
    f.whole_tree = whole_tree
    return f

def v_args(inline=False, meta=False, tree=False):
    "A convenience decorator factory, for modifying the behavior of user-supplied visitor methods"
    if [tree, meta, inline].count(True) > 1:
        raise ValueError("Visitor functions can either accept tree, or meta, or be inlined. These cannot be combined.")
    def _visitor_args_dec(obj):
        return _apply_decorator(obj, _visitor_args_func_dec, inline=inline, meta=meta, whole_tree=tree)
    return _visitor_args_dec



class Indenter:
    def __init__(self):
        self.paren_level = 0
        self.indent_level = [0]

    def handle_NL(self, token):
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] # Tabs and spaces
        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            assert indent == self.indent_level[-1], '%s != %s' % (indent, self.indent_level[-1])

    def process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                for t in self.handle_NL(token):
                    yield t
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    # XXX Hack for ContextualLexer. Maybe there's a more elegant solution?
    @property
    def always_accept(self):
        return (self.NL_type,)


class Token(Str):
    __slots__ = ('type', 'pos_in_stream', 'value', 'line', 'column', 'end_line', 'end_column')

    def __new__(cls, type_, value, pos_in_stream=None, line=None, column=None):
        self = super(Token, cls).__new__(cls, value)
        self.type = type_
        self.pos_in_stream = pos_in_stream
        self.value = value
        self.line = line
        self.column = column
        self.end_line = None
        self.end_column = None
        return self

    @classmethod
    def new_borrow_pos(cls, type_, value, borrow_t):
        return cls(type_, value, borrow_t.pos_in_stream, line=borrow_t.line, column=borrow_t.column)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.pos_in_stream, self.line, self.column, ))

    def __repr__(self):
        return 'Token(%s, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.pos_in_stream, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return Str.__eq__(self, other)

    __hash__ = Str.__hash__


class LineCounter:
    def __init__(self):
        self.newline_char = '\n'
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def feed(self, token, test_newline=True):
        """Consume a token and calculate the new line & column.

        As an optional optimization, set test_newline=False is token doesn't contain a newline.
        """
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1

class _Lex:
    "Built to serve both Lexer and ContextualLexer"
    def __init__(self, lexer, state=None):
        self.lexer = lexer
        self.state = state

    def lex(self, stream, newline_types, ignore_types):
        newline_types = frozenset(newline_types)
        ignore_types = frozenset(ignore_types)
        line_ctr = LineCounter()

        while line_ctr.char_pos < len(stream):
            lexer = self.lexer
            for mre, type_from_index in lexer.mres:
                m = mre.match(stream, line_ctr.char_pos)
                if not m:
                    continue

                t = None
                value = m.group(0)
                type_ = type_from_index[m.lastindex]
                if type_ not in ignore_types:
                    t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                    if t.type in lexer.callback:
                        t = lexer.callback[t.type](t)
                    yield t
                else:
                    if type_ in lexer.callback:
                        t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                        lexer.callback[type_](t)

                line_ctr.feed(value, type_ in newline_types)
                if t:
                    t.end_line = line_ctr.line
                    t.end_column = line_ctr.column

                break
            else:
                raise UnexpectedCharacters(stream, line_ctr.char_pos, line_ctr.line, line_ctr.column, state=self.state)


class UnlessCallback:
    def __init__(self, mres):
        self.mres = mres

    def __call__(self, t):
        for mre, type_from_index in self.mres:
            m = mre.match(t.value)
            if m:
                t.type = type_from_index[m.lastindex]
                break
        return t


from functools import partial, wraps


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)


class PropagatePositions:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            res.meta.empty = True

            for c in children:
                if isinstance(c, Tree) and c.children and not c.meta.empty:
                    res.meta.line = c.meta.line
                    res.meta.column = c.meta.column
                    res.meta.start_pos = c.meta.start_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.line = c.line
                    res.meta.column = c.column
                    res.meta.start_pos = c.pos_in_stream
                    res.meta.empty = False
                    break

            for c in reversed(children):
                if isinstance(c, Tree) and c.children and not c.meta.empty:
                    res.meta.end_line = c.meta.end_line
                    res.meta.end_column = c.meta.end_column
                    res.meta.end_pos = c.meta.end_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.end_line = c.end_line
                    res.meta.end_column = c.end_column
                    res.meta.end_pos = c.pos_in_stream + len(c.value)
                    res.meta.empty = False
                    break

        return res


class ChildFilter:
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        return self.node_builder(filtered)

class ChildFilterLALR(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])

        return self.node_builder(filtered)

def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')

def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous):
    to_include = [(i, _should_expand(sym)) for i, sym in enumerate(expansion)
                  if keep_all_tokens or not (sym.is_term and sym.filter_out)]

    if len(to_include) < len(expansion) or any(to_expand for i, to_expand in to_include):
        return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include)


class Callback(object):
    pass


def ptb_inline_args(func):
    @wraps(func)
    def f(children):
        return func(*children)
    return f



class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, keep_all_tokens=False, ambiguous=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.always_keep_all_tokens = keep_all_tokens
        self.ambiguous = ambiguous

        self.rule_builders = list(self._init_builders(rules))

        self.user_aliases = {}

    def _init_builders(self, rules):
        for rule in rules:
            options = rule.options
            keep_all_tokens = self.always_keep_all_tokens or (options.keep_all_tokens if options else False)
            expand_single_child = options.expand1 if options else False

            wrapper_chain = filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous),
                self.propagate_positions and PropagatePositions,
            ])

            yield rule, wrapper_chain


    def create_callback(self, transformer=None):
        callback = Callback()

        i = 0
        for rule, wrapper_chain in self.rule_builders:
            internal_callback_name = '_cb%d_%s' % (i, rule.origin)
            i += 1

            user_callback_name = rule.alias or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                assert not getattr(f, 'meta', False), "Meta args not supported for internal transformer"
                # XXX InlineTransformer is deprecated!
                if getattr(f, 'inline', False) or isinstance(transformer, InlineTransformer):
                    f = ptb_inline_args(f)
            except AttributeError:
                f = partial(self.tree_class, user_callback_name)

            self.user_aliases[rule] = rule.alias
            rule.alias = internal_callback_name

            for w in wrapper_chain:
                f = w(f)

            if hasattr(callback, internal_callback_name):
                raise GrammarError("Rule '%s' already exists" % (rule,))
            setattr(callback, internal_callback_name, f)

        return callback



class _Parser:
    def __init__(self, parse_table, callbacks):
        self.states = parse_table.states
        self.start_state = parse_table.start_state
        self.end_state = parse_table.end_state
        self.callbacks = callbacks

    def parse(self, seq, set_state=None):
        token = None
        stream = iter(seq)
        states = self.states

        state_stack = [self.start_state]
        value_stack = []

        if set_state: set_state(self.start_state)

        def get_action(token):
            state = state_stack[-1]
            try:
                return states[state][token.type]
            except KeyError:
                expected = [s for s in states[state].keys() if s.isupper()]
                raise UnexpectedToken(token, expected, state=state)

        def reduce(rule):
            size = len(rule.expansion)
            if size:
                s = value_stack[-size:]
                del state_stack[-size:]
                del value_stack[-size:]
            else:
                s = []

            value = self.callbacks[rule](s)

            _action, new_state = states[state_stack[-1]][rule.origin.name]
            assert _action is Shift
            state_stack.append(new_state)
            value_stack.append(value)

        # Main LALR-parser loop
        for token in stream:
            while True:
                action, arg = get_action(token)
                assert arg != self.end_state

                if action is Shift:
                    state_stack.append(arg)
                    value_stack.append(token)
                    if set_state: set_state(arg)
                    break # next token
                else:
                    reduce(arg)

        token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
        while True:
            _action, arg = get_action(token)
            if _action is Shift:
                assert arg == self.end_state
                val ,= value_stack
                return val
            else:
                reduce(arg)


class Symbol(object):
    is_term = NotImplemented

    def __init__(self, name):
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)

class Terminal(Symbol):
    is_term = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)


class NonTerminal(Symbol):
    is_term = False

class Rule(object):
    """
        origin : a symbol
        expansion : a list of symbols
    """
    def __init__(self, origin, expansion, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.options = options

    def __str__(self):
        return '<%s : %s>' % (self.origin, ' '.join(map(str,self.expansion)))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)


class RuleOptions:
    def __init__(self, keep_all_tokens=False, expand1=False, priority=None):
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
        )

Shift = 0
Reduce = 1
import re
class LexerRegexps: pass
NEWLINE_TYPES = ['COMMENT', 'STRLIT', 'WS']
IGNORE_TYPES = ['WS', 'COMMENT']
LEXERS = {}
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ENUMSET>enumset)|(?P<PROGRAM>program)|(?P<VALUE>value)|(?P<ENUM>enum)',
  {1: 'COMMENT', 3: 'WS', 4: 'ENUMSET', 5: 'PROGRAM', 6: 'VALUE', 7: 'ENUM'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[0] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ENUMSET>enumset)|(?P<PROGRAM>program)|(?P<VALUE>value)|(?P<ENUM>enum)',
  {1: 'COMMENT', 3: 'WS', 4: 'ENUMSET', 5: 'PROGRAM', 6: 'VALUE', 7: 'ENUM'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[1] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ENUMSET>enumset)|(?P<PROGRAM>program)|(?P<VALUE>value)|(?P<ENUM>enum)',
  {1: 'COMMENT', 3: 'WS', 4: 'ENUMSET', 5: 'PROGRAM', 6: 'VALUE', 7: 'ENUM'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[2] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)',
  {1: 'NAME', 2: 'COMMENT', 4: 'WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[3] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ENUMSET>enumset)|(?P<PROGRAM>program)|(?P<VALUE>value)|(?P<ENUM>enum)',
  {1: 'COMMENT', 3: 'WS', 4: 'ENUMSET', 5: 'PROGRAM', 6: 'VALUE', 7: 'ENUM'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[4] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)',
  {1: 'NAME', 2: 'COMMENT', 4: 'WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[5] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)',
  {1: 'NAME', 2: 'COMMENT', 4: 'WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[6] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ENUMSET>enumset)|(?P<PROGRAM>program)|(?P<VALUE>value)|(?P<ENUM>enum)',
  {1: 'COMMENT', 3: 'WS', 4: 'ENUMSET', 5: 'PROGRAM', 6: 'VALUE', 7: 'ENUM'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[7] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<PROGRAM>program)',
  {1: 'COMMENT', 3: 'WS', 4: 'PROGRAM'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[8] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n|\\(\\*(.|\n)+\\*\\)))|(?P<WS>(?:[ \t\x0c\r\n])+)',
  {1: 'COMMENT', 3: 'WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[9] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ENUMSET>enumset)|(?P<PROGRAM>program)|(?P<VALUE>value)|(?P<ENUM>enum)',
  {1: 'COMMENT', 3: 'WS', 4: 'ENUMSET', 5: 'PROGRAM', 6: 'VALUE', 7: 'ENUM'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[10] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<LBRACE>\\{)|(?P<SEMICOLON>;)',
  {1: 'COMMENT', 3: 'WS', 4: 'LBRACE', 5: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[11] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<__ANON_0>\\->)|(?P<COMMA>,)|(?P<LBRACE>\\{)|(?P<LSQB>\\[)|(?P<RPAR>\\))|(?P<SEMICOLON>;)',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: '__ANON_0',
   6: 'COMMA',
   7: 'LBRACE',
   8: 'LSQB',
   9: 'RPAR',
   10: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[12] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ENUMSET>enumset)|(?P<PROGRAM>program)|(?P<VALUE>value)|(?P<ENUM>enum)',
  {1: 'COMMENT', 3: 'WS', 4: 'ENUMSET', 5: 'PROGRAM', 6: 'VALUE', 7: 'ENUM'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[13] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<LSQB>\\[)',
  {1: 'COMMENT', 3: 'WS', 4: 'LSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[14] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<LBRACE>\\{)|(?P<SEMICOLON>;)',
  {1: 'COMMENT', 3: 'WS', 4: 'LBRACE', 5: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[15] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<FUNC>func)',
  {1: 'COMMENT', 3: 'WS', 4: 'FUNC'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[16] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)',
  {1: 'NAME', 2: 'COMMENT', 4: 'WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[17] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n|\\(\\*(.|\n)+\\*\\)))|(?P<WS>(?:[ \t\x0c\r\n])+)',
  {1: 'COMMENT', 3: 'WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[18] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<STRLIT>"(?:(?:\\\\"|[^"]))*")|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)',
  {1: 'COMMENT', 3: 'STRLIT', 4: 'WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[19] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ENUMSET>enumset)|(?P<PROGRAM>program)|(?P<VALUE>value)|(?P<ENUM>enum)',
  {1: 'COMMENT', 3: 'WS', 4: 'ENUMSET', 5: 'PROGRAM', 6: 'VALUE', 7: 'ENUM'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[20] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ENUMSET>enumset)|(?P<PROGRAM>program)|(?P<VALUE>value)|(?P<ENUM>enum)',
  {1: 'COMMENT', 3: 'WS', 4: 'ENUMSET', 5: 'PROGRAM', 6: 'VALUE', 7: 'ENUM'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[21] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)',
  {1: 'COMMENT', 3: 'WS', 4: 'INT'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[22] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ENUMSET>enumset)|(?P<PROGRAM>program)|(?P<VALUE>value)|(?P<ENUM>enum)',
  {1: 'COMMENT', 3: 'WS', 4: 'ENUMSET', 5: 'PROGRAM', 6: 'VALUE', 7: 'ENUM'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[23] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)',
  {1: 'NAME', 2: 'COMMENT', 4: 'WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[24] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ENUMSET>enumset)|(?P<PROGRAM>program)|(?P<VALUE>value)|(?P<ENUM>enum)',
  {1: 'COMMENT', 3: 'WS', 4: 'ENUMSET', 5: 'PROGRAM', 6: 'VALUE', 7: 'ENUM'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[25] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)',
  {1: 'NAME', 2: 'COMMENT', 4: 'WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[26] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n|\\(\\*(.|\n)+\\*\\)))|(?P<WS>(?:[ \t\x0c\r\n])+)',
  {1: 'COMMENT', 3: 'WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[27] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<FUNC>func)',
  {1: 'COMMENT', 3: 'WS', 4: 'FUNC'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[28] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<FUNC>func)',
  {1: 'COMMENT', 3: 'WS', 4: 'FUNC'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[29] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<COLON>:)|(?P<LPAR>\\()',
  {1: 'COMMENT', 3: 'WS', 4: 'COLON', 5: 'LPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[30] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<LPAR>\\()',
  {1: 'COMMENT', 3: 'WS', 4: 'LPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[31] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<COMMA>,)|(?P<RBRACE>\\})',
  {1: 'COMMENT', 3: 'WS', 4: 'COMMA', 5: 'RBRACE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[32] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<COMMA>,)|(?P<RBRACE>\\})',
  {1: 'COMMENT', 3: 'WS', 4: 'COMMA', 5: 'RBRACE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[33] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<RBRACE>\\})',
  {1: 'COMMENT', 3: 'WS', 4: 'RBRACE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[34] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<RSQB>\\])',
  {1: 'COMMENT', 3: 'WS', 4: 'RSQB'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[35] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<COLON>:)',
  {1: 'COMMENT', 3: 'WS', 4: 'COLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[36] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<RBRACE>\\})',
  {1: 'NAME', 2: 'COMMENT', 4: 'WS', 5: 'RBRACE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[37] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<RBRACE>\\})',
  {1: 'COMMENT', 3: 'WS', 4: 'RBRACE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[38] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<COLON>:)',
  {1: 'COMMENT', 3: 'WS', 4: 'COLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[39] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<FUNC>func)',
  {1: 'COMMENT', 3: 'WS', 4: 'FUNC'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[40] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<RPAR>\\))',
  {1: 'NAME', 2: 'COMMENT', 4: 'WS', 5: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[41] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<COMMA>,)|(?P<RBRACE>\\})',
  {1: 'COMMENT', 3: 'WS', 4: 'COMMA', 5: 'RBRACE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[42] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<STRLIT>"(?:(?:\\\\"|[^"]))*")|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)',
  {1: 'COMMENT', 3: 'STRLIT', 4: 'WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[43] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ENUMSET>enumset)|(?P<PROGRAM>program)|(?P<VALUE>value)|(?P<ENUM>enum)',
  {1: 'COMMENT', 3: 'WS', 4: 'ENUMSET', 5: 'PROGRAM', 6: 'VALUE', 7: 'ENUM'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[44] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<LBRACE>\\{)|(?P<SEMICOLON>;)',
  {1: 'COMMENT', 3: 'WS', 4: 'LBRACE', 5: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[45] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<BOOL>bool)|(?P<__ANON_8>int)',
  {1: 'COMMENT', 3: 'WS', 4: 'BOOL', 5: '__ANON_8'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[46] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<RBRACE>\\})',
  {1: 'NAME', 2: 'COMMENT', 4: 'WS', 5: 'RBRACE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[47] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<RBRACE>\\})',
  {1: 'NAME', 2: 'COMMENT', 4: 'WS', 5: 'RBRACE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[48] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ENUMSET>enumset)|(?P<PROGRAM>program)|(?P<VALUE>value)|(?P<ENUM>enum)',
  {1: 'COMMENT', 3: 'WS', 4: 'ENUMSET', 5: 'PROGRAM', 6: 'VALUE', 7: 'ENUM'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[49] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)',
  {1: 'NAME', 2: 'COMMENT', 4: 'WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[50] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<COMMA>,)|(?P<RPAR>\\))',
  {1: 'COMMENT', 3: 'WS', 4: 'COMMA', 5: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[51] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<RPAR>\\))',
  {1: 'COMMENT', 3: 'WS', 4: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[52] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<STRLIT>"(?:(?:\\\\"|[^"]))*")|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)',
  {1: 'COMMENT', 3: 'STRLIT', 4: 'WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[53] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<COMMA>,)|(?P<RBRACE>\\})',
  {1: 'COMMENT', 3: 'WS', 4: 'COMMA', 5: 'RBRACE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[54] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ENUMSET>enumset)|(?P<PROGRAM>program)|(?P<VALUE>value)|(?P<ENUM>enum)',
  {1: 'COMMENT', 3: 'WS', 4: 'ENUMSET', 5: 'PROGRAM', 6: 'VALUE', 7: 'ENUM'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[55] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<SEMICOLON>;)',
  {1: 'COMMENT', 3: 'WS', 4: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[56] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<SEMICOLON>;)',
  {1: 'COMMENT', 3: 'WS', 4: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[57] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<SEMICOLON>;)',
  {1: 'COMMENT', 3: 'WS', 4: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[58] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<RBRACE>\\})',
  {1: 'NAME', 2: 'COMMENT', 4: 'WS', 5: 'RBRACE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[59] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<__ANON_0>\\->)',
  {1: 'COMMENT', 3: 'WS', 4: '__ANON_0'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[60] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<__ANON_0>\\->)',
  {1: 'COMMENT', 3: 'WS', 4: '__ANON_0'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[61] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<__ANON_0>\\->)|(?P<COMMA>,)|(?P<LBRACE>\\{)|(?P<SEMICOLON>;)',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: '__ANON_0',
   6: 'COMMA',
   7: 'LBRACE',
   8: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[62] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<LBRACE>\\{)|(?P<SEMICOLON>;)',
  {1: 'COMMENT', 3: 'WS', 4: 'LBRACE', 5: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[63] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)',
  {1: 'NAME', 2: 'COMMENT', 4: 'WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[64] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<COMMA>,)|(?P<RPAR>\\))',
  {1: 'COMMENT', 3: 'WS', 4: 'COMMA', 5: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[65] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<__ANON_0>\\->)',
  {1: 'COMMENT', 3: 'WS', 4: '__ANON_0'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[66] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<COMMA>,)|(?P<RBRACE>\\})',
  {1: 'COMMENT', 3: 'WS', 4: 'COMMA', 5: 'RBRACE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[67] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<RBRACE>\\})',
  {1: 'NAME', 2: 'COMMENT', 4: 'WS', 5: 'RBRACE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[68] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)',
  {1: 'NAME', 2: 'COMMENT', 4: 'WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[69] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ELSE>else)|(?P<THEN>then)|(?P<__ANON_1>==>)|(?P<__ANON_0>\\->)|(?P<__ANON_2>\\|\\|)|(?P<__ANON_3>\\&\\&)|(?P<__ANON_4>==)|(?P<__ANON_5>!=)|(?P<__ANON_6><=)|(?P<__ANON_7>>=)|(?P<COMMA>,)|(?P<LBRACE>\\{)|(?P<LESSTHAN><)|(?P<MINUS>\\-)|(?P<MORETHAN>>)|(?P<PERCENT>%)|(?P<PLUS>\\+)|(?P<RPAR>\\))|(?P<SEMICOLON>;)|(?P<SLASH>/)|(?P<STAR>\\*)',
  {1: 'COMMENT',
   3: 'WS',
   4: 'ELSE',
   5: 'THEN',
   6: '__ANON_1',
   7: '__ANON_0',
   8: '__ANON_2',
   9: '__ANON_3',
   10: '__ANON_4',
   11: '__ANON_5',
   12: '__ANON_6',
   13: '__ANON_7',
   14: 'COMMA',
   15: 'LBRACE',
   16: 'LESSTHAN',
   17: 'MINUS',
   18: 'MORETHAN',
   19: 'PERCENT',
   20: 'PLUS',
   21: 'RPAR',
   22: 'SEMICOLON',
   23: 'SLASH',
   24: 'STAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[70] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<__ANON_0>\\->)|(?P<COMMA>,)|(?P<LBRACE>\\{)|(?P<SEMICOLON>;)',
  {1: 'COMMENT',
   3: 'WS',
   4: '__ANON_0',
   5: 'COMMA',
   6: 'LBRACE',
   7: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[71] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<FUNC>func)',
  {1: 'COMMENT', 3: 'WS', 4: 'FUNC'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[72] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<BANG>!)|(?P<LPAR>\\()|(?P<MINUS>\\-)',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: 'INT',
   6: 'BANG',
   7: 'LPAR',
   8: 'MINUS'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)|(?P<IF>if$)',
           {1: 'FALSE', 2: 'TRUE', 3: 'IF'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[73] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<FUNC>func)',
  {1: 'COMMENT', 3: 'WS', 4: 'FUNC'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[74] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<COMMA>,)|(?P<RPAR>\\))',
  {1: 'COMMENT', 3: 'WS', 4: 'COMMA', 5: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[75] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)',
  {1: 'NAME', 2: 'COMMENT', 4: 'WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[76] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)',
  {1: 'NAME', 2: 'COMMENT', 4: 'WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[77] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<COMMA>,)|(?P<LBRACE>\\{)|(?P<SEMICOLON>;)',
  {1: 'COMMENT', 3: 'WS', 4: 'COMMA', 5: 'LBRACE', 6: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[78] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<LBRACE>\\{)|(?P<SEMICOLON>;)',
  {1: 'COMMENT', 3: 'WS', 4: 'LBRACE', 5: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[79] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<COMMA>,)|(?P<LBRACE>\\{)|(?P<SEMICOLON>;)',
  {1: 'COMMENT', 3: 'WS', 4: 'COMMA', 5: 'LBRACE', 6: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[80] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ELSE>else)|(?P<THEN>then)|(?P<__ANON_1>==>)|(?P<__ANON_2>\\|\\|)|(?P<__ANON_3>\\&\\&)|(?P<__ANON_4>==)|(?P<__ANON_5>!=)|(?P<__ANON_6><=)|(?P<__ANON_7>>=)|(?P<LESSTHAN><)|(?P<MINUS>\\-)|(?P<MORETHAN>>)|(?P<PERCENT>%)|(?P<PLUS>\\+)|(?P<RPAR>\\))|(?P<SEMICOLON>;)|(?P<SLASH>/)|(?P<STAR>\\*)',
  {1: 'COMMENT',
   3: 'WS',
   4: 'ELSE',
   5: 'THEN',
   6: '__ANON_1',
   7: '__ANON_2',
   8: '__ANON_3',
   9: '__ANON_4',
   10: '__ANON_5',
   11: '__ANON_6',
   12: '__ANON_7',
   13: 'LESSTHAN',
   14: 'MINUS',
   15: 'MORETHAN',
   16: 'PERCENT',
   17: 'PLUS',
   18: 'RPAR',
   19: 'SEMICOLON',
   20: 'SLASH',
   21: 'STAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[81] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ELSE>else)|(?P<THEN>then)|(?P<__ANON_1>==>)|(?P<__ANON_2>\\|\\|)|(?P<__ANON_3>\\&\\&)|(?P<__ANON_4>==)|(?P<__ANON_5>!=)|(?P<__ANON_6><=)|(?P<__ANON_7>>=)|(?P<LESSTHAN><)|(?P<MINUS>\\-)|(?P<MORETHAN>>)|(?P<PERCENT>%)|(?P<PLUS>\\+)|(?P<RPAR>\\))|(?P<SEMICOLON>;)|(?P<SLASH>/)|(?P<STAR>\\*)',
  {1: 'COMMENT',
   3: 'WS',
   4: 'ELSE',
   5: 'THEN',
   6: '__ANON_1',
   7: '__ANON_2',
   8: '__ANON_3',
   9: '__ANON_4',
   10: '__ANON_5',
   11: '__ANON_6',
   12: '__ANON_7',
   13: 'LESSTHAN',
   14: 'MINUS',
   15: 'MORETHAN',
   16: 'PERCENT',
   17: 'PLUS',
   18: 'RPAR',
   19: 'SEMICOLON',
   20: 'SLASH',
   21: 'STAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[82] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<LPAR>\\()',
  {1: 'NAME', 2: 'COMMENT', 4: 'WS', 5: 'INT', 6: 'LPAR'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)', {1: 'FALSE', 2: 'TRUE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[83] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<BANG>!)|(?P<LPAR>\\()|(?P<MINUS>\\-)|(?P<RBRACE>\\})',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: 'INT',
   6: 'BANG',
   7: 'LPAR',
   8: 'MINUS',
   9: 'RBRACE'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)|(?P<IF>if$)',
           {1: 'FALSE', 2: 'TRUE', 3: 'IF'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[84] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ELSE>else)|(?P<THEN>then)|(?P<__ANON_1>==>)|(?P<__ANON_2>\\|\\|)|(?P<__ANON_3>\\&\\&)|(?P<RPAR>\\))|(?P<SEMICOLON>;)',
  {1: 'COMMENT',
   3: 'WS',
   4: 'ELSE',
   5: 'THEN',
   6: '__ANON_1',
   7: '__ANON_2',
   8: '__ANON_3',
   9: 'RPAR',
   10: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[85] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ELSE>else)|(?P<THEN>then)|(?P<__ANON_1>==>)|(?P<__ANON_2>\\|\\|)|(?P<__ANON_3>\\&\\&)|(?P<__ANON_4>==)|(?P<__ANON_5>!=)|(?P<__ANON_6><=)|(?P<__ANON_7>>=)|(?P<LESSTHAN><)|(?P<MINUS>\\-)|(?P<MORETHAN>>)|(?P<PERCENT>%)|(?P<PLUS>\\+)|(?P<RPAR>\\))|(?P<SEMICOLON>;)|(?P<SLASH>/)|(?P<STAR>\\*)',
  {1: 'COMMENT',
   3: 'WS',
   4: 'ELSE',
   5: 'THEN',
   6: '__ANON_1',
   7: '__ANON_2',
   8: '__ANON_3',
   9: '__ANON_4',
   10: '__ANON_5',
   11: '__ANON_6',
   12: '__ANON_7',
   13: 'LESSTHAN',
   14: 'MINUS',
   15: 'MORETHAN',
   16: 'PERCENT',
   17: 'PLUS',
   18: 'RPAR',
   19: 'SEMICOLON',
   20: 'SLASH',
   21: 'STAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[86] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ELSE>else)|(?P<THEN>then)|(?P<__ANON_1>==>)|(?P<__ANON_2>\\|\\|)|(?P<__ANON_3>\\&\\&)|(?P<__ANON_4>==)|(?P<__ANON_5>!=)|(?P<__ANON_6><=)|(?P<__ANON_7>>=)|(?P<LESSTHAN><)|(?P<MINUS>\\-)|(?P<MORETHAN>>)|(?P<PERCENT>%)|(?P<PLUS>\\+)|(?P<RPAR>\\))|(?P<SEMICOLON>;)|(?P<SLASH>/)|(?P<STAR>\\*)',
  {1: 'COMMENT',
   3: 'WS',
   4: 'ELSE',
   5: 'THEN',
   6: '__ANON_1',
   7: '__ANON_2',
   8: '__ANON_3',
   9: '__ANON_4',
   10: '__ANON_5',
   11: '__ANON_6',
   12: '__ANON_7',
   13: 'LESSTHAN',
   14: 'MINUS',
   15: 'MORETHAN',
   16: 'PERCENT',
   17: 'PLUS',
   18: 'RPAR',
   19: 'SEMICOLON',
   20: 'SLASH',
   21: 'STAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[87] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ELSE>else)|(?P<THEN>then)|(?P<__ANON_1>==>)|(?P<__ANON_0>\\->)|(?P<__ANON_2>\\|\\|)|(?P<__ANON_3>\\&\\&)|(?P<__ANON_4>==)|(?P<__ANON_5>!=)|(?P<__ANON_6><=)|(?P<__ANON_7>>=)|(?P<COLON>:)|(?P<COMMA>,)|(?P<LBRACE>\\{)|(?P<LESSTHAN><)|(?P<LPAR>\\()|(?P<MINUS>\\-)|(?P<MORETHAN>>)|(?P<PERCENT>%)|(?P<PLUS>\\+)|(?P<RPAR>\\))|(?P<SEMICOLON>;)|(?P<SLASH>/)|(?P<STAR>\\*)',
  {1: 'COMMENT',
   3: 'WS',
   4: 'ELSE',
   5: 'THEN',
   6: '__ANON_1',
   7: '__ANON_0',
   8: '__ANON_2',
   9: '__ANON_3',
   10: '__ANON_4',
   11: '__ANON_5',
   12: '__ANON_6',
   13: '__ANON_7',
   14: 'COLON',
   15: 'COMMA',
   16: 'LBRACE',
   17: 'LESSTHAN',
   18: 'LPAR',
   19: 'MINUS',
   20: 'MORETHAN',
   21: 'PERCENT',
   22: 'PLUS',
   23: 'RPAR',
   24: 'SEMICOLON',
   25: 'SLASH',
   26: 'STAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[88] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ELSE>else)|(?P<THEN>then)|(?P<__ANON_1>==>)|(?P<__ANON_2>\\|\\|)|(?P<__ANON_3>\\&\\&)|(?P<__ANON_4>==)|(?P<__ANON_5>!=)|(?P<__ANON_6><=)|(?P<__ANON_7>>=)|(?P<LESSTHAN><)|(?P<MORETHAN>>)|(?P<RPAR>\\))|(?P<SEMICOLON>;)',
  {1: 'COMMENT',
   3: 'WS',
   4: 'ELSE',
   5: 'THEN',
   6: '__ANON_1',
   7: '__ANON_2',
   8: '__ANON_3',
   9: '__ANON_4',
   10: '__ANON_5',
   11: '__ANON_6',
   12: '__ANON_7',
   13: 'LESSTHAN',
   14: 'MORETHAN',
   15: 'RPAR',
   16: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[89] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ELSE>else)|(?P<THEN>then)|(?P<__ANON_1>==>)|(?P<__ANON_2>\\|\\|)|(?P<__ANON_3>\\&\\&)|(?P<__ANON_4>==)|(?P<__ANON_5>!=)|(?P<__ANON_6><=)|(?P<__ANON_7>>=)|(?P<LESSTHAN><)|(?P<MINUS>\\-)|(?P<MORETHAN>>)|(?P<PERCENT>%)|(?P<PLUS>\\+)|(?P<RPAR>\\))|(?P<SEMICOLON>;)|(?P<SLASH>/)|(?P<STAR>\\*)',
  {1: 'COMMENT',
   3: 'WS',
   4: 'ELSE',
   5: 'THEN',
   6: '__ANON_1',
   7: '__ANON_2',
   8: '__ANON_3',
   9: '__ANON_4',
   10: '__ANON_5',
   11: '__ANON_6',
   12: '__ANON_7',
   13: 'LESSTHAN',
   14: 'MINUS',
   15: 'MORETHAN',
   16: 'PERCENT',
   17: 'PLUS',
   18: 'RPAR',
   19: 'SEMICOLON',
   20: 'SLASH',
   21: 'STAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[90] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ELSE>else)|(?P<THEN>then)|(?P<__ANON_1>==>)|(?P<__ANON_2>\\|\\|)|(?P<RPAR>\\))|(?P<SEMICOLON>;)',
  {1: 'COMMENT',
   3: 'WS',
   4: 'ELSE',
   5: 'THEN',
   6: '__ANON_1',
   7: '__ANON_2',
   8: 'RPAR',
   9: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[91] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<RPAR>\\))|(?P<SEMICOLON>;)',
  {1: 'COMMENT', 3: 'WS', 4: 'RPAR', 5: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[92] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ELSE>else)|(?P<THEN>then)|(?P<__ANON_1>==>)|(?P<__ANON_2>\\|\\|)|(?P<__ANON_3>\\&\\&)|(?P<__ANON_4>==)|(?P<__ANON_5>!=)|(?P<__ANON_6><=)|(?P<__ANON_7>>=)|(?P<LESSTHAN><)|(?P<MINUS>\\-)|(?P<MORETHAN>>)|(?P<PERCENT>%)|(?P<PLUS>\\+)|(?P<RPAR>\\))|(?P<SEMICOLON>;)|(?P<SLASH>/)|(?P<STAR>\\*)',
  {1: 'COMMENT',
   3: 'WS',
   4: 'ELSE',
   5: 'THEN',
   6: '__ANON_1',
   7: '__ANON_2',
   8: '__ANON_3',
   9: '__ANON_4',
   10: '__ANON_5',
   11: '__ANON_6',
   12: '__ANON_7',
   13: 'LESSTHAN',
   14: 'MINUS',
   15: 'MORETHAN',
   16: 'PERCENT',
   17: 'PLUS',
   18: 'RPAR',
   19: 'SEMICOLON',
   20: 'SLASH',
   21: 'STAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[93] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<BANG>!)|(?P<LPAR>\\()|(?P<MINUS>\\-)',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: 'INT',
   6: 'BANG',
   7: 'LPAR',
   8: 'MINUS'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)|(?P<IF>if$)',
           {1: 'FALSE', 2: 'TRUE', 3: 'IF'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[94] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ELSE>else)|(?P<THEN>then)|(?P<__ANON_1>==>)|(?P<__ANON_2>\\|\\|)|(?P<__ANON_3>\\&\\&)|(?P<__ANON_4>==)|(?P<__ANON_5>!=)|(?P<__ANON_6><=)|(?P<__ANON_7>>=)|(?P<LESSTHAN><)|(?P<MINUS>\\-)|(?P<MORETHAN>>)|(?P<PERCENT>%)|(?P<PLUS>\\+)|(?P<RPAR>\\))|(?P<SEMICOLON>;)|(?P<SLASH>/)|(?P<STAR>\\*)',
  {1: 'COMMENT',
   3: 'WS',
   4: 'ELSE',
   5: 'THEN',
   6: '__ANON_1',
   7: '__ANON_2',
   8: '__ANON_3',
   9: '__ANON_4',
   10: '__ANON_5',
   11: '__ANON_6',
   12: '__ANON_7',
   13: 'LESSTHAN',
   14: 'MINUS',
   15: 'MORETHAN',
   16: 'PERCENT',
   17: 'PLUS',
   18: 'RPAR',
   19: 'SEMICOLON',
   20: 'SLASH',
   21: 'STAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[95] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<SEMICOLON>;)',
  {1: 'COMMENT', 3: 'WS', 4: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[96] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<LPAR>\\()',
  {1: 'COMMENT', 3: 'WS', 4: 'LPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[97] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<RBRACE>\\})',
  {1: 'COMMENT', 3: 'WS', 4: 'RBRACE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[98] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ELSE>else)|(?P<THEN>then)|(?P<__ANON_1>==>)|(?P<__ANON_2>\\|\\|)|(?P<__ANON_3>\\&\\&)|(?P<__ANON_4>==)|(?P<__ANON_5>!=)|(?P<__ANON_6><=)|(?P<__ANON_7>>=)|(?P<LESSTHAN><)|(?P<MINUS>\\-)|(?P<MORETHAN>>)|(?P<PERCENT>%)|(?P<PLUS>\\+)|(?P<RPAR>\\))|(?P<SEMICOLON>;)|(?P<SLASH>/)|(?P<STAR>\\*)',
  {1: 'COMMENT',
   3: 'WS',
   4: 'ELSE',
   5: 'THEN',
   6: '__ANON_1',
   7: '__ANON_2',
   8: '__ANON_3',
   9: '__ANON_4',
   10: '__ANON_5',
   11: '__ANON_6',
   12: '__ANON_7',
   13: 'LESSTHAN',
   14: 'MINUS',
   15: 'MORETHAN',
   16: 'PERCENT',
   17: 'PLUS',
   18: 'RPAR',
   19: 'SEMICOLON',
   20: 'SLASH',
   21: 'STAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[99] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ELSE>else)|(?P<THEN>then)|(?P<__ANON_1>==>)|(?P<__ANON_2>\\|\\|)|(?P<__ANON_3>\\&\\&)|(?P<__ANON_4>==)|(?P<__ANON_5>!=)|(?P<__ANON_6><=)|(?P<__ANON_7>>=)|(?P<LESSTHAN><)|(?P<MINUS>\\-)|(?P<MORETHAN>>)|(?P<PLUS>\\+)|(?P<RPAR>\\))|(?P<SEMICOLON>;)',
  {1: 'COMMENT',
   3: 'WS',
   4: 'ELSE',
   5: 'THEN',
   6: '__ANON_1',
   7: '__ANON_2',
   8: '__ANON_3',
   9: '__ANON_4',
   10: '__ANON_5',
   11: '__ANON_6',
   12: '__ANON_7',
   13: 'LESSTHAN',
   14: 'MINUS',
   15: 'MORETHAN',
   16: 'PLUS',
   17: 'RPAR',
   18: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[100] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<BANG>!)|(?P<LPAR>\\()|(?P<MINUS>\\-)',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: 'INT',
   6: 'BANG',
   7: 'LPAR',
   8: 'MINUS'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)', {1: 'FALSE', 2: 'TRUE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[101] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<LPAR>\\()',
  {1: 'NAME', 2: 'COMMENT', 4: 'WS', 5: 'INT', 6: 'LPAR'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)', {1: 'FALSE', 2: 'TRUE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[102] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<RPAR>\\))|(?P<SEMICOLON>;)',
  {1: 'COMMENT', 3: 'WS', 4: 'RPAR', 5: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[103] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ELSE>else)|(?P<THEN>then)|(?P<__ANON_1>==>)|(?P<__ANON_2>\\|\\|)|(?P<__ANON_3>\\&\\&)|(?P<__ANON_4>==)|(?P<__ANON_5>!=)|(?P<__ANON_6><=)|(?P<__ANON_7>>=)|(?P<LESSTHAN><)|(?P<MINUS>\\-)|(?P<MORETHAN>>)|(?P<PERCENT>%)|(?P<PLUS>\\+)|(?P<RPAR>\\))|(?P<SEMICOLON>;)|(?P<SLASH>/)|(?P<STAR>\\*)',
  {1: 'COMMENT',
   3: 'WS',
   4: 'ELSE',
   5: 'THEN',
   6: '__ANON_1',
   7: '__ANON_2',
   8: '__ANON_3',
   9: '__ANON_4',
   10: '__ANON_5',
   11: '__ANON_6',
   12: '__ANON_7',
   13: 'LESSTHAN',
   14: 'MINUS',
   15: 'MORETHAN',
   16: 'PERCENT',
   17: 'PLUS',
   18: 'RPAR',
   19: 'SEMICOLON',
   20: 'SLASH',
   21: 'STAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[104] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<LPAR>\\()',
  {1: 'NAME', 2: 'COMMENT', 4: 'WS', 5: 'INT', 6: 'LPAR'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)', {1: 'FALSE', 2: 'TRUE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[105] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ELSE>else)|(?P<THEN>then)|(?P<__ANON_1>==>)|(?P<__ANON_2>\\|\\|)|(?P<__ANON_3>\\&\\&)|(?P<__ANON_4>==)|(?P<__ANON_5>!=)|(?P<__ANON_6><=)|(?P<__ANON_7>>=)|(?P<LESSTHAN><)|(?P<MINUS>\\-)|(?P<MORETHAN>>)|(?P<PERCENT>%)|(?P<PLUS>\\+)|(?P<RPAR>\\))|(?P<SEMICOLON>;)|(?P<SLASH>/)|(?P<STAR>\\*)',
  {1: 'COMMENT',
   3: 'WS',
   4: 'ELSE',
   5: 'THEN',
   6: '__ANON_1',
   7: '__ANON_2',
   8: '__ANON_3',
   9: '__ANON_4',
   10: '__ANON_5',
   11: '__ANON_6',
   12: '__ANON_7',
   13: 'LESSTHAN',
   14: 'MINUS',
   15: 'MORETHAN',
   16: 'PERCENT',
   17: 'PLUS',
   18: 'RPAR',
   19: 'SEMICOLON',
   20: 'SLASH',
   21: 'STAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[106] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<COMMA>,)|(?P<RPAR>\\))',
  {1: 'COMMENT', 3: 'WS', 4: 'COMMA', 5: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[107] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<SEMICOLON>;)',
  {1: 'COMMENT', 3: 'WS', 4: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[108] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<COMMA>,)|(?P<LBRACE>\\{)|(?P<SEMICOLON>;)',
  {1: 'COMMENT', 3: 'WS', 4: 'COMMA', 5: 'LBRACE', 6: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[109] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)',
  {1: 'NAME', 2: 'COMMENT', 4: 'WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[110] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<BANG>!)|(?P<LPAR>\\()|(?P<MINUS>\\-)',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: 'INT',
   6: 'BANG',
   7: 'LPAR',
   8: 'MINUS'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)', {1: 'FALSE', 2: 'TRUE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[111] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<BANG>!)|(?P<LPAR>\\()|(?P<MINUS>\\-)',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: 'INT',
   6: 'BANG',
   7: 'LPAR',
   8: 'MINUS'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)', {1: 'FALSE', 2: 'TRUE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[112] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<BANG>!)|(?P<LPAR>\\()|(?P<MINUS>\\-)',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: 'INT',
   6: 'BANG',
   7: 'LPAR',
   8: 'MINUS'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)', {1: 'FALSE', 2: 'TRUE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[113] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<BANG>!)|(?P<LPAR>\\()|(?P<MINUS>\\-)',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: 'INT',
   6: 'BANG',
   7: 'LPAR',
   8: 'MINUS'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)', {1: 'FALSE', 2: 'TRUE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[114] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<BANG>!)|(?P<LPAR>\\()|(?P<MINUS>\\-)|(?P<RBRACE>\\})',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: 'INT',
   6: 'BANG',
   7: 'LPAR',
   8: 'MINUS',
   9: 'RBRACE'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)|(?P<IF>if$)',
           {1: 'FALSE', 2: 'TRUE', 3: 'IF'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[115] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<BANG>!)|(?P<LPAR>\\()|(?P<MINUS>\\-)|(?P<RBRACE>\\})',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: 'INT',
   6: 'BANG',
   7: 'LPAR',
   8: 'MINUS',
   9: 'RBRACE'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)|(?P<IF>if$)',
           {1: 'FALSE', 2: 'TRUE', 3: 'IF'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[116] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<BANG>!)|(?P<LPAR>\\()|(?P<MINUS>\\-)',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: 'INT',
   6: 'BANG',
   7: 'LPAR',
   8: 'MINUS'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)', {1: 'FALSE', 2: 'TRUE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[117] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<BANG>!)|(?P<LPAR>\\()|(?P<MINUS>\\-)',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: 'INT',
   6: 'BANG',
   7: 'LPAR',
   8: 'MINUS'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)', {1: 'FALSE', 2: 'TRUE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[118] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<BANG>!)|(?P<LPAR>\\()|(?P<MINUS>\\-)',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: 'INT',
   6: 'BANG',
   7: 'LPAR',
   8: 'MINUS'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)', {1: 'FALSE', 2: 'TRUE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[119] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<BANG>!)|(?P<LPAR>\\()|(?P<MINUS>\\-)',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: 'INT',
   6: 'BANG',
   7: 'LPAR',
   8: 'MINUS'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)', {1: 'FALSE', 2: 'TRUE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[120] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<BANG>!)|(?P<LPAR>\\()|(?P<MINUS>\\-)',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: 'INT',
   6: 'BANG',
   7: 'LPAR',
   8: 'MINUS'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)', {1: 'FALSE', 2: 'TRUE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[121] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<BANG>!)|(?P<LPAR>\\()|(?P<MINUS>\\-)',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: 'INT',
   6: 'BANG',
   7: 'LPAR',
   8: 'MINUS'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)', {1: 'FALSE', 2: 'TRUE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[122] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<BANG>!)|(?P<LPAR>\\()|(?P<MINUS>\\-)',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: 'INT',
   6: 'BANG',
   7: 'LPAR',
   8: 'MINUS'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)', {1: 'FALSE', 2: 'TRUE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[123] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<BANG>!)|(?P<LPAR>\\()|(?P<MINUS>\\-)',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: 'INT',
   6: 'BANG',
   7: 'LPAR',
   8: 'MINUS'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)', {1: 'FALSE', 2: 'TRUE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[124] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<BANG>!)|(?P<LPAR>\\()|(?P<MINUS>\\-)',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: 'INT',
   6: 'BANG',
   7: 'LPAR',
   8: 'MINUS'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)', {1: 'FALSE', 2: 'TRUE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[125] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<BANG>!)|(?P<LPAR>\\()|(?P<MINUS>\\-)',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: 'INT',
   6: 'BANG',
   7: 'LPAR',
   8: 'MINUS'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)', {1: 'FALSE', 2: 'TRUE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[126] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<RPAR>\\))',
  {1: 'COMMENT', 3: 'WS', 4: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[127] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<BANG>!)|(?P<LPAR>\\()|(?P<MINUS>\\-)|(?P<RBRACE>\\})',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: 'INT',
   6: 'BANG',
   7: 'LPAR',
   8: 'MINUS',
   9: 'RBRACE'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)|(?P<IF>if$)',
           {1: 'FALSE', 2: 'TRUE', 3: 'IF'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[128] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)',
  {1: 'NAME', 2: 'COMMENT', 4: 'WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[129] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<FUNC>func)',
  {1: 'COMMENT', 3: 'WS', 4: 'FUNC'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[130] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<BANG>!)|(?P<LPAR>\\()|(?P<MINUS>\\-)',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: 'INT',
   6: 'BANG',
   7: 'LPAR',
   8: 'MINUS'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)', {1: 'FALSE', 2: 'TRUE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[131] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<BANG>!)|(?P<LPAR>\\()|(?P<MINUS>\\-)',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: 'INT',
   6: 'BANG',
   7: 'LPAR',
   8: 'MINUS'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)', {1: 'FALSE', 2: 'TRUE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[132] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<BANG>!)|(?P<LPAR>\\()|(?P<MINUS>\\-)',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: 'INT',
   6: 'BANG',
   7: 'LPAR',
   8: 'MINUS'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)', {1: 'FALSE', 2: 'TRUE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[133] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<THEN>then)',
  {1: 'COMMENT', 3: 'WS', 4: 'THEN'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[134] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ELSE>else)|(?P<THEN>then)|(?P<__ANON_1>==>)|(?P<__ANON_2>\\|\\|)|(?P<__ANON_3>\\&\\&)|(?P<__ANON_4>==)|(?P<__ANON_5>!=)|(?P<__ANON_6><=)|(?P<__ANON_7>>=)|(?P<LESSTHAN><)|(?P<MINUS>\\-)|(?P<MORETHAN>>)|(?P<PERCENT>%)|(?P<PLUS>\\+)|(?P<RPAR>\\))|(?P<SEMICOLON>;)|(?P<SLASH>/)|(?P<STAR>\\*)',
  {1: 'COMMENT',
   3: 'WS',
   4: 'ELSE',
   5: 'THEN',
   6: '__ANON_1',
   7: '__ANON_2',
   8: '__ANON_3',
   9: '__ANON_4',
   10: '__ANON_5',
   11: '__ANON_6',
   12: '__ANON_7',
   13: 'LESSTHAN',
   14: 'MINUS',
   15: 'MORETHAN',
   16: 'PERCENT',
   17: 'PLUS',
   18: 'RPAR',
   19: 'SEMICOLON',
   20: 'SLASH',
   21: 'STAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[135] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<FUNC>func)',
  {1: 'COMMENT', 3: 'WS', 4: 'FUNC'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[136] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)',
  {1: 'NAME', 2: 'COMMENT', 4: 'WS'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[137] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<COMMA>,)|(?P<LBRACE>\\{)|(?P<SEMICOLON>;)',
  {1: 'COMMENT', 3: 'WS', 4: 'COMMA', 5: 'LBRACE', 6: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[138] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ELSE>else)|(?P<THEN>then)|(?P<__ANON_1>==>)|(?P<__ANON_2>\\|\\|)|(?P<__ANON_3>\\&\\&)|(?P<__ANON_4>==)|(?P<__ANON_5>!=)|(?P<__ANON_6><=)|(?P<__ANON_7>>=)|(?P<LESSTHAN><)|(?P<MINUS>\\-)|(?P<MORETHAN>>)|(?P<PERCENT>%)|(?P<PLUS>\\+)|(?P<RPAR>\\))|(?P<SEMICOLON>;)|(?P<SLASH>/)|(?P<STAR>\\*)',
  {1: 'COMMENT',
   3: 'WS',
   4: 'ELSE',
   5: 'THEN',
   6: '__ANON_1',
   7: '__ANON_2',
   8: '__ANON_3',
   9: '__ANON_4',
   10: '__ANON_5',
   11: '__ANON_6',
   12: '__ANON_7',
   13: 'LESSTHAN',
   14: 'MINUS',
   15: 'MORETHAN',
   16: 'PERCENT',
   17: 'PLUS',
   18: 'RPAR',
   19: 'SEMICOLON',
   20: 'SLASH',
   21: 'STAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[139] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<BANG>!)|(?P<LPAR>\\()|(?P<MINUS>\\-)|(?P<RBRACE>\\})',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: 'INT',
   6: 'BANG',
   7: 'LPAR',
   8: 'MINUS',
   9: 'RBRACE'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)|(?P<IF>if$)',
           {1: 'FALSE', 2: 'TRUE', 3: 'IF'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[140] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ELSE>else)|(?P<THEN>then)|(?P<__ANON_1>==>)|(?P<__ANON_2>\\|\\|)|(?P<__ANON_3>\\&\\&)|(?P<__ANON_4>==)|(?P<__ANON_5>!=)|(?P<__ANON_6><=)|(?P<__ANON_7>>=)|(?P<LESSTHAN><)|(?P<MORETHAN>>)|(?P<RPAR>\\))|(?P<SEMICOLON>;)',
  {1: 'COMMENT',
   3: 'WS',
   4: 'ELSE',
   5: 'THEN',
   6: '__ANON_1',
   7: '__ANON_2',
   8: '__ANON_3',
   9: '__ANON_4',
   10: '__ANON_5',
   11: '__ANON_6',
   12: '__ANON_7',
   13: 'LESSTHAN',
   14: 'MORETHAN',
   15: 'RPAR',
   16: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[141] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ELSE>else)|(?P<THEN>then)|(?P<__ANON_1>==>)|(?P<__ANON_2>\\|\\|)|(?P<__ANON_3>\\&\\&)|(?P<__ANON_4>==)|(?P<__ANON_5>!=)|(?P<__ANON_6><=)|(?P<__ANON_7>>=)|(?P<LESSTHAN><)|(?P<MINUS>\\-)|(?P<MORETHAN>>)|(?P<PLUS>\\+)|(?P<RPAR>\\))|(?P<SEMICOLON>;)',
  {1: 'COMMENT',
   3: 'WS',
   4: 'ELSE',
   5: 'THEN',
   6: '__ANON_1',
   7: '__ANON_2',
   8: '__ANON_3',
   9: '__ANON_4',
   10: '__ANON_5',
   11: '__ANON_6',
   12: '__ANON_7',
   13: 'LESSTHAN',
   14: 'MINUS',
   15: 'MORETHAN',
   16: 'PLUS',
   17: 'RPAR',
   18: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[142] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ELSE>else)|(?P<THEN>then)|(?P<__ANON_1>==>)|(?P<__ANON_2>\\|\\|)|(?P<__ANON_3>\\&\\&)|(?P<RPAR>\\))|(?P<SEMICOLON>;)',
  {1: 'COMMENT',
   3: 'WS',
   4: 'ELSE',
   5: 'THEN',
   6: '__ANON_1',
   7: '__ANON_2',
   8: '__ANON_3',
   9: 'RPAR',
   10: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[143] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ELSE>else)|(?P<THEN>then)|(?P<RPAR>\\))|(?P<SEMICOLON>;)',
  {1: 'COMMENT', 3: 'WS', 4: 'ELSE', 5: 'THEN', 6: 'RPAR', 7: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[144] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ELSE>else)|(?P<THEN>then)|(?P<__ANON_1>==>)|(?P<__ANON_2>\\|\\|)|(?P<__ANON_3>\\&\\&)|(?P<__ANON_4>==)|(?P<__ANON_5>!=)|(?P<__ANON_6><=)|(?P<__ANON_7>>=)|(?P<LESSTHAN><)|(?P<MINUS>\\-)|(?P<MORETHAN>>)|(?P<PERCENT>%)|(?P<PLUS>\\+)|(?P<RPAR>\\))|(?P<SEMICOLON>;)|(?P<SLASH>/)|(?P<STAR>\\*)',
  {1: 'COMMENT',
   3: 'WS',
   4: 'ELSE',
   5: 'THEN',
   6: '__ANON_1',
   7: '__ANON_2',
   8: '__ANON_3',
   9: '__ANON_4',
   10: '__ANON_5',
   11: '__ANON_6',
   12: '__ANON_7',
   13: 'LESSTHAN',
   14: 'MINUS',
   15: 'MORETHAN',
   16: 'PERCENT',
   17: 'PLUS',
   18: 'RPAR',
   19: 'SEMICOLON',
   20: 'SLASH',
   21: 'STAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[145] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<RPAR>\\))',
  {1: 'COMMENT', 3: 'WS', 4: 'RPAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[146] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ELSE>else)|(?P<THEN>then)|(?P<__ANON_1>==>)|(?P<__ANON_2>\\|\\|)|(?P<__ANON_3>\\&\\&)|(?P<__ANON_4>==)|(?P<__ANON_5>!=)|(?P<__ANON_6><=)|(?P<__ANON_7>>=)|(?P<LESSTHAN><)|(?P<MINUS>\\-)|(?P<MORETHAN>>)|(?P<PERCENT>%)|(?P<PLUS>\\+)|(?P<RPAR>\\))|(?P<SEMICOLON>;)|(?P<SLASH>/)|(?P<STAR>\\*)',
  {1: 'COMMENT',
   3: 'WS',
   4: 'ELSE',
   5: 'THEN',
   6: '__ANON_1',
   7: '__ANON_2',
   8: '__ANON_3',
   9: '__ANON_4',
   10: '__ANON_5',
   11: '__ANON_6',
   12: '__ANON_7',
   13: 'LESSTHAN',
   14: 'MINUS',
   15: 'MORETHAN',
   16: 'PERCENT',
   17: 'PLUS',
   18: 'RPAR',
   19: 'SEMICOLON',
   20: 'SLASH',
   21: 'STAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[147] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<BANG>!)|(?P<LPAR>\\()|(?P<MINUS>\\-)',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: 'INT',
   6: 'BANG',
   7: 'LPAR',
   8: 'MINUS'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)', {1: 'FALSE', 2: 'TRUE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[148] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<COMMA>,)|(?P<LBRACE>\\{)|(?P<SEMICOLON>;)',
  {1: 'COMMENT', 3: 'WS', 4: 'COMMA', 5: 'LBRACE', 6: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[149] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ELSE>else)|(?P<THEN>then)|(?P<__ANON_1>==>)|(?P<__ANON_2>\\|\\|)|(?P<__ANON_3>\\&\\&)|(?P<__ANON_4>==)|(?P<__ANON_5>!=)|(?P<__ANON_6><=)|(?P<__ANON_7>>=)|(?P<LESSTHAN><)|(?P<MINUS>\\-)|(?P<MORETHAN>>)|(?P<PERCENT>%)|(?P<PLUS>\\+)|(?P<RPAR>\\))|(?P<SEMICOLON>;)|(?P<SLASH>/)|(?P<STAR>\\*)',
  {1: 'COMMENT',
   3: 'WS',
   4: 'ELSE',
   5: 'THEN',
   6: '__ANON_1',
   7: '__ANON_2',
   8: '__ANON_3',
   9: '__ANON_4',
   10: '__ANON_5',
   11: '__ANON_6',
   12: '__ANON_7',
   13: 'LESSTHAN',
   14: 'MINUS',
   15: 'MORETHAN',
   16: 'PERCENT',
   17: 'PLUS',
   18: 'RPAR',
   19: 'SEMICOLON',
   20: 'SLASH',
   21: 'STAR'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[150] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<ELSE>else)',
  {1: 'COMMENT', 3: 'WS', 4: 'ELSE'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[151] = (lexer_regexps)
MRES = (
[('(?P<NAME>(?:_|(?:[A-Z]|[a-z]))(?:(?:(?:_|(?:[A-Z]|[a-z]))|[0-9]))*)|(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<INT>(?:[0-9])+)|(?P<BANG>!)|(?P<LPAR>\\()|(?P<MINUS>\\-)',
  {1: 'NAME',
   2: 'COMMENT',
   4: 'WS',
   5: 'INT',
   6: 'BANG',
   7: 'LPAR',
   8: 'MINUS'})]
)
LEXER_CALLBACK = (
{'NAME': [('(?P<FALSE>false$)|(?P<TRUE>true$)', {1: 'FALSE', 2: 'TRUE'})]}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[152] = (lexer_regexps)
MRES = (
[('(?P<COMMENT>(?:\\#.*\\\n'
  '|\\(\\*(.|\n'
  ')+\\*\\)))|(?P<WS>(?:[ \t\x0c'
  '\r\n'
  '])+)|(?P<RPAR>\\))|(?P<SEMICOLON>;)',
  {1: 'COMMENT', 3: 'WS', 4: 'RPAR', 5: 'SEMICOLON'})]
)
LEXER_CALLBACK = (
{}
)
lexer_regexps = LexerRegexps()
lexer_regexps.mres = [(re.compile(p), d) for p, d in MRES]
lexer_regexps.callback = {n: UnlessCallback([(re.compile(p), d) for p, d in mres])
                          for n, mres in LEXER_CALLBACK.items()}
LEXERS[153] = (lexer_regexps)
class ContextualLexer:
    def __init__(self):
        self.lexers = LEXERS
        self.set_parser_state(None)
    def set_parser_state(self, state):
        self.parser_state = state
    def lex(self, stream):
        newline_types = NEWLINE_TYPES
        ignore_types = IGNORE_TYPES
        lexers = LEXERS
        l = _Lex(lexers[self.parser_state], self.parser_state)
        for x in l.lex(stream, newline_types, ignore_types):
            yield x
            l.lexer = lexers[self.parser_state]
            l.state = self.parser_state
CON_LEXER = ContextualLexer()
def lex(stream):
    return CON_LEXER.lex(stream)
RULES = {
  0: Rule(NonTerminal('start'), [NonTerminal('type_decls'), NonTerminal('program_decl'), NonTerminal('func_decls')], None, RuleOptions(False, False, None)),
  1: Rule(NonTerminal('type_decls'), [NonTerminal('__anon_star_0')], None, RuleOptions(False, False, None)),
  2: Rule(NonTerminal('type_decls'), [], None, RuleOptions(False, False, None)),
  3: Rule(NonTerminal('type_decl'), [NonTerminal('enum_decl')], None, RuleOptions(False, True, None)),
  4: Rule(NonTerminal('type_decl'), [NonTerminal('enum_set_decl')], None, RuleOptions(False, True, None)),
  5: Rule(NonTerminal('type_decl'), [NonTerminal('value_decl')], None, RuleOptions(False, True, None)),
  6: Rule(NonTerminal('enum_decl'), [Terminal('ENUM', True), NonTerminal('type_name'), NonTerminal('enum_body')], None, RuleOptions(False, False, None)),
  7: Rule(NonTerminal('enum_set_decl'), [Terminal('ENUMSET', True), NonTerminal('type_name'), Terminal('LSQB', True), Terminal('INT', False), Terminal('RSQB', True), NonTerminal('enum_body')], None, RuleOptions(False, False, None)),
  8: Rule(NonTerminal('enum_body'), [Terminal('LBRACE', True), NonTerminal('enum_items'), Terminal('RBRACE', True)], None, RuleOptions(False, True, None)),
  9: Rule(NonTerminal('enum_body'), [Terminal('SEMICOLON', True)], None, RuleOptions(False, True, None)),
  10: Rule(NonTerminal('enum_items'), [NonTerminal('enum_item'), NonTerminal('__anon_star_1')], None, RuleOptions(False, False, None)),
  11: Rule(NonTerminal('enum_items'), [NonTerminal('enum_item')], None, RuleOptions(False, False, None)),
  12: Rule(NonTerminal('value_decl'), [Terminal('VALUE', True), NonTerminal('type_name'), NonTerminal('value_body')], None, RuleOptions(False, False, None)),
  13: Rule(NonTerminal('value_body'), [Terminal('LBRACE', True), NonTerminal('value_items'), Terminal('RBRACE', True)], None, RuleOptions(False, True, None)),
  14: Rule(NonTerminal('value_body'), [Terminal('SEMICOLON', True)], None, RuleOptions(False, True, None)),
  15: Rule(NonTerminal('value_items'), [NonTerminal('value_item'), NonTerminal('__anon_star_2')], None, RuleOptions(False, False, None)),
  16: Rule(NonTerminal('value_items'), [NonTerminal('value_item')], None, RuleOptions(False, False, None)),
  17: Rule(NonTerminal('value_item'), [NonTerminal('func_name'), Terminal('COLON', True), NonTerminal('expr_type_name'), Terminal('SEMICOLON', True)], None, RuleOptions(False, False, None)),
  18: Rule(NonTerminal('program_decl'), [Terminal('PROGRAM', True), NonTerminal('func_name'), Terminal('LPAR', True), NonTerminal('type_names'), Terminal('RPAR', True), Terminal('__ANON_0', True), NonTerminal('type_name'), Terminal('SEMICOLON', True)], None, RuleOptions(False, False, None)),
  19: Rule(NonTerminal('func_decls'), [], None, RuleOptions(False, False, None)),
  20: Rule(NonTerminal('func_decls'), [NonTerminal('__anon_star_3')], None, RuleOptions(False, False, None)),
  21: Rule(NonTerminal('func_decl'), [Terminal('FUNC', True), NonTerminal('func_name'), Terminal('COLON', True), NonTerminal('func_body'), NonTerminal('func_constraints')], None, RuleOptions(False, False, None)),
  22: Rule(NonTerminal('func_body'), [NonTerminal('func_lhs'), Terminal('__ANON_0', True), NonTerminal('func_rhss')], None, RuleOptions(False, False, None)),
  23: Rule(NonTerminal('func_lhs'), [NonTerminal('opt_arg')], None, RuleOptions(False, True, None)),
  24: Rule(NonTerminal('func_rhss'), [NonTerminal('func_rhs')], None, RuleOptions(False, False, None)),
  25: Rule(NonTerminal('func_rhss'), [NonTerminal('func_rhs'), NonTerminal('__anon_star_4')], None, RuleOptions(False, False, None)),
  26: Rule(NonTerminal('func_rhs'), [NonTerminal('opt_arg')], None, RuleOptions(False, True, None)),
  27: Rule(NonTerminal('opt_arg'), [NonTerminal('type_name')], None, RuleOptions(False, False, None)),
  28: Rule(NonTerminal('opt_arg'), [NonTerminal('type_name'), NonTerminal('var_name')], None, RuleOptions(False, False, None)),
  29: Rule(NonTerminal('func_constraints'), [Terminal('LBRACE', True), NonTerminal('func_constraint_items'), Terminal('RBRACE', True)], None, RuleOptions(False, True, None)),
  30: Rule(NonTerminal('func_constraints'), [Terminal('SEMICOLON', True)], None, RuleOptions(False, True, None)),
  31: Rule(NonTerminal('func_constraint_items'), [NonTerminal('func_constraint_item'), NonTerminal('__anon_star_5')], None, RuleOptions(False, False, None)),
  32: Rule(NonTerminal('func_constraint_items'), [NonTerminal('func_constraint_item')], None, RuleOptions(False, False, None)),
  33: Rule(NonTerminal('func_constraint_item'), [NonTerminal('expr'), Terminal('SEMICOLON', True)], None, RuleOptions(False, True, None)),
  34: Rule(NonTerminal('expr'), [NonTerminal('cond_expr')], None, RuleOptions(False, True, None)),
  35: Rule(NonTerminal('expr'), [NonTerminal('imply_expr')], None, RuleOptions(False, True, None)),
  36: Rule(NonTerminal('imply_expr'), [NonTerminal('or_expr'), Terminal('__ANON_1', True), NonTerminal('imply_expr')], None, RuleOptions(False, True, None)),
  37: Rule(NonTerminal('imply_expr'), [NonTerminal('or_expr')], None, RuleOptions(False, True, None)),
  38: Rule(NonTerminal('or_expr'), [NonTerminal('and_expr')], None, RuleOptions(False, True, None)),
  39: Rule(NonTerminal('or_expr'), [NonTerminal('or_expr'), Terminal('__ANON_2', True), NonTerminal('and_expr')], None, RuleOptions(False, True, None)),
  40: Rule(NonTerminal('and_expr'), [NonTerminal('and_expr'), Terminal('__ANON_3', True), NonTerminal('cmp_expr')], None, RuleOptions(False, True, None)),
  41: Rule(NonTerminal('and_expr'), [NonTerminal('cmp_expr')], None, RuleOptions(False, True, None)),
  42: Rule(NonTerminal('cmp_expr'), [NonTerminal('cmp_expr'), NonTerminal('cmp_op'), NonTerminal('term_expr')], None, RuleOptions(False, True, None)),
  43: Rule(NonTerminal('cmp_expr'), [NonTerminal('term_expr')], None, RuleOptions(False, True, None)),
  44: Rule(NonTerminal('cmp_op'), [Terminal('__ANON_5', True)], 'expr_ne', RuleOptions(False, True, None)),
  45: Rule(NonTerminal('cmp_op'), [Terminal('__ANON_6', True)], 'expr_le', RuleOptions(False, True, None)),
  46: Rule(NonTerminal('cmp_op'), [Terminal('__ANON_7', True)], 'expr_ge', RuleOptions(False, True, None)),
  47: Rule(NonTerminal('cmp_op'), [Terminal('__ANON_4', True)], 'expr_eq', RuleOptions(False, True, None)),
  48: Rule(NonTerminal('cmp_op'), [Terminal('MORETHAN', True)], 'expr_gt', RuleOptions(False, True, None)),
  49: Rule(NonTerminal('cmp_op'), [Terminal('LESSTHAN', True)], 'expr_lt', RuleOptions(False, True, None)),
  50: Rule(NonTerminal('term_expr'), [NonTerminal('term_expr'), NonTerminal('term_op'), NonTerminal('factor_expr')], None, RuleOptions(False, True, None)),
  51: Rule(NonTerminal('term_expr'), [NonTerminal('factor_expr')], None, RuleOptions(False, True, None)),
  52: Rule(NonTerminal('term_op'), [Terminal('PLUS', True)], 'expr_add', RuleOptions(False, True, None)),
  53: Rule(NonTerminal('term_op'), [Terminal('MINUS', True)], 'expr_sub', RuleOptions(False, True, None)),
  54: Rule(NonTerminal('factor_expr'), [NonTerminal('factor_expr'), NonTerminal('factor_op'), NonTerminal('unary_expr')], None, RuleOptions(False, True, None)),
  55: Rule(NonTerminal('factor_expr'), [NonTerminal('unary_expr')], None, RuleOptions(False, True, None)),
  56: Rule(NonTerminal('factor_op'), [Terminal('SLASH', True)], 'expr_div', RuleOptions(False, True, None)),
  57: Rule(NonTerminal('factor_op'), [Terminal('STAR', True)], 'expr_mul', RuleOptions(False, True, None)),
  58: Rule(NonTerminal('factor_op'), [Terminal('PERCENT', True)], 'expr_mod', RuleOptions(False, True, None)),
  59: Rule(NonTerminal('unary_expr'), [NonTerminal('atom_expr')], None, RuleOptions(False, True, None)),
  60: Rule(NonTerminal('unary_expr'), [NonTerminal('unary_op'), NonTerminal('atom_expr')], None, RuleOptions(False, True, None)),
  61: Rule(NonTerminal('unary_op'), [Terminal('BANG', True)], 'expr_not', RuleOptions(False, True, None)),
  62: Rule(NonTerminal('unary_op'), [Terminal('MINUS', True)], 'expr_neg', RuleOptions(False, True, None)),
  63: Rule(NonTerminal('atom_expr'), [NonTerminal('var_expr')], None, RuleOptions(False, True, None)),
  64: Rule(NonTerminal('atom_expr'), [NonTerminal('property_expr')], None, RuleOptions(False, True, None)),
  65: Rule(NonTerminal('atom_expr'), [Terminal('LPAR', True), NonTerminal('expr'), Terminal('RPAR', True)], None, RuleOptions(False, True, None)),
  66: Rule(NonTerminal('atom_expr'), [NonTerminal('const_expr')], None, RuleOptions(False, True, None)),
  67: Rule(NonTerminal('const_expr'), [Terminal('FALSE', True)], 'expr_false', RuleOptions(False, True, None)),
  68: Rule(NonTerminal('const_expr'), [Terminal('TRUE', True)], 'expr_true', RuleOptions(False, True, None)),
  69: Rule(NonTerminal('const_expr'), [Terminal('INT', False)], 'expr_intlit', RuleOptions(False, True, None)),
  70: Rule(NonTerminal('var_expr'), [NonTerminal('var_name')], 'expr_var', RuleOptions(False, True, None)),
  71: Rule(NonTerminal('cond_expr'), [Terminal('IF', True), NonTerminal('imply_expr'), Terminal('THEN', True), NonTerminal('imply_expr'), Terminal('ELSE', True), NonTerminal('imply_expr')], None, RuleOptions(False, True, None)),
  72: Rule(NonTerminal('property_expr'), [NonTerminal('func_name'), Terminal('LPAR', True), NonTerminal('var_expr'), Terminal('RPAR', True)], None, RuleOptions(False, True, None)),
  73: Rule(NonTerminal('type_names'), [NonTerminal('type_name')], None, RuleOptions(False, False, None)),
  74: Rule(NonTerminal('type_names'), [NonTerminal('type_name'), NonTerminal('__anon_star_6')], None, RuleOptions(False, False, None)),
  75: Rule(NonTerminal('type_names'), [], None, RuleOptions(False, False, None)),
  76: Rule(NonTerminal('enum_item'), [Terminal('STRLIT', False)], None, RuleOptions(False, True, None)),
  77: Rule(NonTerminal('expr_type_name'), [Terminal('BOOL', True)], 'expr_bool', RuleOptions(False, True, None)),
  78: Rule(NonTerminal('expr_type_name'), [Terminal('__ANON_8', True)], 'expr_int', RuleOptions(False, True, None)),
  79: Rule(NonTerminal('type_name'), [Terminal('NAME', False)], None, RuleOptions(False, True, None)),
  80: Rule(NonTerminal('var_name'), [Terminal('NAME', False)], None, RuleOptions(False, True, None)),
  81: Rule(NonTerminal('func_name'), [Terminal('NAME', False)], None, RuleOptions(False, True, None)),
  82: Rule(NonTerminal('__anon_star_0'), [NonTerminal('type_decl')], None, None),
  83: Rule(NonTerminal('__anon_star_0'), [NonTerminal('__anon_star_0'), NonTerminal('type_decl')], None, None),
  84: Rule(NonTerminal('__anon_star_1'), [Terminal('COMMA', True), NonTerminal('enum_item')], None, None),
  85: Rule(NonTerminal('__anon_star_1'), [NonTerminal('__anon_star_1'), Terminal('COMMA', True), NonTerminal('enum_item')], None, None),
  86: Rule(NonTerminal('__anon_star_2'), [NonTerminal('__anon_star_2'), NonTerminal('value_item')], None, None),
  87: Rule(NonTerminal('__anon_star_2'), [NonTerminal('value_item')], None, None),
  88: Rule(NonTerminal('__anon_star_3'), [NonTerminal('func_decl')], None, None),
  89: Rule(NonTerminal('__anon_star_3'), [NonTerminal('__anon_star_3'), NonTerminal('func_decl')], None, None),
  90: Rule(NonTerminal('__anon_star_4'), [NonTerminal('__anon_star_4'), Terminal('COMMA', True), NonTerminal('func_rhs')], None, None),
  91: Rule(NonTerminal('__anon_star_4'), [Terminal('COMMA', True), NonTerminal('func_rhs')], None, None),
  92: Rule(NonTerminal('__anon_star_5'), [NonTerminal('func_constraint_item')], None, None),
  93: Rule(NonTerminal('__anon_star_5'), [NonTerminal('__anon_star_5'), NonTerminal('func_constraint_item')], None, None),
  94: Rule(NonTerminal('__anon_star_6'), [NonTerminal('__anon_star_6'), Terminal('COMMA', True), NonTerminal('type_name')], None, None),
  95: Rule(NonTerminal('__anon_star_6'), [Terminal('COMMA', True), NonTerminal('type_name')], None, None),
}
parse_tree_builder = ParseTreeBuilder(RULES.values(), Tree)
class ParseTable: pass
parse_table = ParseTable()
STATES = {
  0: {0: (1, 2), 1: (0, 1), 2: (0, 2), 3: (0, 3), 4: (0, 4), 5: (0, 5), 6: (0, 6), 7: (0, 7), 8: (0, 8), 9: (0, 9), 10: (0, 10)},
  1: {3: (1, 4), 0: (1, 4), 5: (1, 4), 6: (1, 4)},
  2: {3: (1, 3), 0: (1, 3), 5: (1, 3), 6: (1, 3)},
  3: {11: (0, 11), 12: (0, 12)},
  4: {0: (1, 1), 1: (0, 1), 2: (0, 2), 3: (0, 3), 5: (0, 5), 6: (0, 6), 10: (0, 10), 7: (0, 13)},
  5: {12: (0, 12), 11: (0, 14)},
  6: {11: (0, 15), 12: (0, 12)},
  7: {3: (1, 82), 0: (1, 82), 5: (1, 82), 6: (1, 82)},
  8: {13: (0, 16), 0: (0, 17)},
  9: {14: (0, 18)},
  10: {3: (1, 5), 0: (1, 5), 5: (1, 5), 6: (1, 5)},
  11: {15: (0, 19), 16: (0, 20), 17: (0, 21)},
  12: {18: (1, 79), 16: (1, 79), 19: (1, 79), 12: (1, 79), 20: (1, 79), 21: (1, 79), 15: (1, 79)},
  13: {3: (1, 83), 0: (1, 83), 5: (1, 83), 6: (1, 83)},
  14: {19: (0, 22)},
  15: {22: (0, 23), 15: (0, 24), 16: (0, 25)},
  16: {14: (1, 19), 23: (0, 26), 24: (0, 27), 25: (0, 28), 26: (0, 29)},
  17: {12: (0, 30), 27: (0, 31)},
  18: {},
  19: {28: (0, 32), 29: (0, 33), 30: (0, 34)},
  20: {3: (1, 9), 0: (1, 9), 6: (1, 9), 5: (1, 9)},
  21: {3: (1, 6), 0: (1, 6), 6: (1, 6), 5: (1, 6)},
  22: {31: (0, 35)},
  23: {3: (1, 12), 0: (1, 12), 6: (1, 12), 5: (1, 12)},
  24: {27: (0, 36), 12: (0, 30), 32: (0, 37), 33: (0, 38)},
  25: {3: (1, 14), 0: (1, 14), 6: (1, 14), 5: (1, 14)},
  26: {12: (0, 30), 27: (0, 39)},
  27: {14: (1, 0)},
  28: {14: (1, 88), 23: (1, 88)},
  29: {14: (1, 20), 23: (0, 26), 25: (0, 40)},
  30: {34: (1, 81), 35: (1, 81)},
  31: {34: (0, 41)},
  32: {21: (1, 76), 36: (1, 76)},
  33: {36: (1, 11), 37: (0, 42), 21: (0, 43)},
  34: {36: (0, 44)},
  35: {38: (0, 45)},
  36: {35: (0, 46)},
  37: {36: (1, 16), 27: (0, 36), 39: (0, 47), 12: (0, 30), 32: (0, 48)},
  38: {36: (0, 49)},
  39: {35: (0, 50)},
  40: {14: (1, 89), 23: (1, 89)},
  41: {20: (1, 75), 12: (0, 12), 11: (0, 51), 40: (0, 52)},
  42: {36: (1, 10), 21: (0, 53)},
  43: {29: (0, 54), 28: (0, 32)},
  44: {3: (1, 8), 0: (1, 8), 6: (1, 8), 5: (1, 8)},
  45: {15: (0, 19), 16: (0, 20), 17: (0, 55)},
  46: {41: (0, 56), 42: (0, 57), 43: (0, 58)},
  47: {36: (1, 15), 27: (0, 36), 32: (0, 59), 12: (0, 30)},
  48: {12: (1, 87), 36: (1, 87)},
  49: {3: (1, 13), 0: (1, 13), 6: (1, 13), 5: (1, 13)},
  50: {44: (0, 60), 45: (0, 61), 12: (0, 12), 11: (0, 62), 46: (0, 63)},
  51: {20: (1, 73), 21: (0, 64), 47: (0, 65)},
  52: {20: (0, 66)},
  53: {28: (0, 32), 29: (0, 67)},
  54: {21: (1, 84), 36: (1, 84)},
  55: {3: (1, 7), 0: (1, 7), 6: (1, 7), 5: (1, 7)},
  56: {16: (1, 77)},
  57: {16: (1, 78)},
  58: {16: (0, 68)},
  59: {12: (1, 86), 36: (1, 86)},
  60: {18: (0, 69)},
  61: {18: (1, 23)},
  62: {18: (1, 27), 16: (1, 27), 15: (1, 27), 21: (1, 27), 12: (0, 70), 48: (0, 71)},
  63: {49: (0, 72), 15: (0, 73), 16: (0, 74)},
  64: {11: (0, 75), 12: (0, 12)},
  65: {20: (1, 74), 21: (0, 76)},
  66: {18: (0, 77)},
  67: {21: (1, 85), 36: (1, 85)},
  68: {12: (1, 17), 36: (1, 17)},
  69: {50: (0, 78), 12: (0, 12), 51: (0, 79), 45: (0, 80), 11: (0, 62)},
  70: {52: (1, 80), 53: (1, 80), 15: (1, 80), 54: (1, 80), 55: (1, 80), 20: (1, 80), 21: (1, 80), 56: (1, 80), 57: (1, 80), 58: (1, 80), 18: (1, 80), 16: (1, 80), 59: (1, 80), 60: (1, 80), 61: (1, 80), 62: (1, 80), 63: (1, 80), 64: (1, 80), 65: (1, 80), 66: (1, 80), 67: (1, 80)},
  71: {18: (1, 28), 16: (1, 28), 15: (1, 28), 21: (1, 28)},
  72: {14: (1, 21), 23: (1, 21)},
  73: {68: (0, 81), 69: (0, 82), 57: (0, 83), 70: (0, 84), 71: (0, 85), 72: (0, 86), 73: (0, 87), 12: (0, 88), 74: (0, 89), 48: (0, 90), 75: (0, 91), 76: (0, 92), 77: (0, 93), 34: (0, 94), 78: (0, 95), 79: (0, 96), 27: (0, 97), 80: (0, 98), 81: (0, 99), 82: (0, 100), 83: (0, 101), 84: (0, 102), 85: (0, 103), 86: (0, 104), 87: (0, 105), 31: (0, 106)},
  74: {14: (1, 30), 23: (1, 30)},
  75: {20: (1, 95), 21: (1, 95)},
  76: {12: (0, 12), 11: (0, 107)},
  77: {11: (0, 108), 12: (0, 12)},
  78: {16: (1, 24), 15: (1, 24), 88: (0, 109), 21: (0, 110)},
  79: {16: (1, 22), 15: (1, 22)},
  80: {16: (1, 26), 15: (1, 26), 21: (1, 26)},
  81: {16: (1, 51), 52: (1, 51), 59: (1, 51), 60: (1, 51), 61: (1, 51), 54: (1, 51), 55: (1, 51), 62: (1, 51), 20: (1, 51), 63: (1, 51), 57: (1, 51), 64: (1, 51), 65: (1, 51), 66: (1, 51), 67: (1, 51), 89: (0, 111), 56: (0, 112), 58: (0, 113), 53: (0, 114)},
  82: {16: (1, 64), 52: (1, 64), 53: (1, 64), 59: (1, 64), 60: (1, 64), 61: (1, 64), 54: (1, 64), 55: (1, 64), 62: (1, 64), 20: (1, 64), 63: (1, 64), 56: (1, 64), 57: (1, 64), 64: (1, 64), 65: (1, 64), 66: (1, 64), 58: (1, 64), 67: (1, 64)},
  83: {12: (1, 62), 78: (1, 62), 34: (1, 62), 31: (1, 62), 77: (1, 62)},
  84: {36: (1, 32), 68: (0, 81), 69: (0, 82), 57: (0, 83), 71: (0, 85), 72: (0, 86), 73: (0, 87), 12: (0, 88), 74: (0, 89), 48: (0, 90), 75: (0, 91), 76: (0, 92), 77: (0, 93), 70: (0, 115), 34: (0, 94), 78: (0, 95), 79: (0, 96), 90: (0, 116), 27: (0, 97), 81: (0, 99), 82: (0, 100), 83: (0, 101), 84: (0, 102), 85: (0, 103), 86: (0, 104), 87: (0, 105), 31: (0, 106)},
  85: {16: (1, 38), 52: (1, 38), 20: (1, 38), 60: (1, 38), 64: (1, 38), 55: (1, 38), 63: (0, 117)},
  86: {16: (1, 63), 52: (1, 63), 53: (1, 63), 59: (1, 63), 60: (1, 63), 61: (1, 63), 54: (1, 63), 55: (1, 63), 62: (1, 63), 20: (1, 63), 63: (1, 63), 56: (1, 63), 57: (1, 63), 64: (1, 63), 65: (1, 63), 66: (1, 63), 58: (1, 63), 67: (1, 63)},
  87: {16: (1, 55), 52: (1, 55), 53: (1, 55), 59: (1, 55), 60: (1, 55), 61: (1, 55), 54: (1, 55), 55: (1, 55), 62: (1, 55), 20: (1, 55), 63: (1, 55), 56: (1, 55), 57: (1, 55), 64: (1, 55), 65: (1, 55), 66: (1, 55), 58: (1, 55), 67: (1, 55)},
  88: {34: (1, 81), 35: (1, 81), 52: (1, 80), 53: (1, 80), 15: (1, 80), 54: (1, 80), 55: (1, 80), 20: (1, 80), 21: (1, 80), 56: (1, 80), 57: (1, 80), 58: (1, 80), 18: (1, 80), 16: (1, 80), 59: (1, 80), 60: (1, 80), 61: (1, 80), 62: (1, 80), 63: (1, 80), 64: (1, 80), 65: (1, 80), 66: (1, 80), 67: (1, 80)},
  89: {16: (1, 41), 52: (1, 41), 20: (1, 41), 63: (1, 41), 60: (1, 41), 64: (1, 41), 55: (1, 41), 59: (0, 118), 54: (0, 119), 62: (0, 120), 61: (0, 121), 91: (0, 122), 66: (0, 123), 67: (0, 124)},
  90: {52: (1, 70), 53: (1, 70), 54: (1, 70), 55: (1, 70), 20: (1, 70), 56: (1, 70), 57: (1, 70), 58: (1, 70), 16: (1, 70), 59: (1, 70), 60: (1, 70), 61: (1, 70), 62: (1, 70), 63: (1, 70), 64: (1, 70), 65: (1, 70), 66: (1, 70), 67: (1, 70)},
  91: {16: (1, 37), 52: (1, 37), 20: (1, 37), 60: (1, 37), 55: (0, 125), 64: (0, 126)},
  92: {16: (1, 34), 20: (1, 34)},
  93: {52: (1, 67), 53: (1, 67), 54: (1, 67), 55: (1, 67), 20: (1, 67), 56: (1, 67), 57: (1, 67), 58: (1, 67), 16: (1, 67), 59: (1, 67), 60: (1, 67), 61: (1, 67), 62: (1, 67), 63: (1, 67), 64: (1, 67), 65: (1, 67), 66: (1, 67), 67: (1, 67)},
  94: {34: (0, 94), 68: (0, 81), 78: (0, 95), 69: (0, 82), 74: (0, 89), 27: (0, 97), 12: (0, 88), 57: (0, 83), 81: (0, 99), 82: (0, 100), 71: (0, 85), 83: (0, 101), 72: (0, 86), 79: (0, 127), 75: (0, 91), 73: (0, 87), 84: (0, 102), 85: (0, 103), 48: (0, 90), 86: (0, 104), 76: (0, 92), 87: (0, 105), 77: (0, 93), 31: (0, 106)},
  95: {52: (1, 68), 53: (1, 68), 54: (1, 68), 55: (1, 68), 20: (1, 68), 56: (1, 68), 57: (1, 68), 58: (1, 68), 16: (1, 68), 59: (1, 68), 60: (1, 68), 61: (1, 68), 62: (1, 68), 63: (1, 68), 64: (1, 68), 65: (1, 68), 66: (1, 68), 67: (1, 68)},
  96: {16: (0, 128)},
  97: {34: (0, 129)},
  98: {36: (0, 130)},
  99: {16: (1, 59), 52: (1, 59), 53: (1, 59), 59: (1, 59), 60: (1, 59), 61: (1, 59), 54: (1, 59), 55: (1, 59), 62: (1, 59), 20: (1, 59), 63: (1, 59), 56: (1, 59), 57: (1, 59), 64: (1, 59), 65: (1, 59), 66: (1, 59), 58: (1, 59), 67: (1, 59)},
  100: {16: (1, 43), 52: (1, 43), 59: (1, 43), 60: (1, 43), 61: (1, 43), 54: (1, 43), 55: (1, 43), 62: (1, 43), 20: (1, 43), 63: (1, 43), 64: (1, 43), 66: (1, 43), 67: (1, 43), 92: (0, 131), 65: (0, 132), 57: (0, 133)},
  101: {34: (0, 94), 85: (0, 134), 68: (0, 81), 78: (0, 95), 69: (0, 82), 74: (0, 89), 27: (0, 97), 12: (0, 88), 57: (0, 83), 81: (0, 99), 82: (0, 100), 71: (0, 85), 72: (0, 86), 75: (0, 91), 73: (0, 87), 84: (0, 102), 48: (0, 90), 86: (0, 104), 87: (0, 105), 77: (0, 93), 31: (0, 106)},
  102: {12: (1, 61), 78: (1, 61), 34: (1, 61), 31: (1, 61), 77: (1, 61)},
  103: {16: (1, 35), 20: (1, 35)},
  104: {16: (1, 66), 52: (1, 66), 53: (1, 66), 59: (1, 66), 60: (1, 66), 61: (1, 66), 54: (1, 66), 55: (1, 66), 62: (1, 66), 20: (1, 66), 63: (1, 66), 56: (1, 66), 57: (1, 66), 64: (1, 66), 65: (1, 66), 66: (1, 66), 58: (1, 66), 67: (1, 66)},
  105: {34: (0, 94), 72: (0, 86), 12: (0, 88), 78: (0, 95), 48: (0, 90), 69: (0, 82), 86: (0, 104), 27: (0, 97), 77: (0, 93), 31: (0, 106), 81: (0, 135)},
  106: {52: (1, 69), 53: (1, 69), 54: (1, 69), 55: (1, 69), 20: (1, 69), 56: (1, 69), 57: (1, 69), 58: (1, 69), 16: (1, 69), 59: (1, 69), 60: (1, 69), 61: (1, 69), 62: (1, 69), 63: (1, 69), 64: (1, 69), 65: (1, 69), 66: (1, 69), 67: (1, 69)},
  107: {20: (1, 94), 21: (1, 94)},
  108: {16: (0, 136)},
  109: {16: (1, 25), 15: (1, 25), 21: (0, 137)},
  110: {50: (0, 138), 12: (0, 12), 45: (0, 80), 11: (0, 62)},
  111: {34: (0, 94), 77: (0, 93), 78: (0, 95), 69: (0, 82), 27: (0, 97), 12: (0, 88), 57: (0, 83), 81: (0, 99), 72: (0, 86), 84: (0, 102), 48: (0, 90), 86: (0, 104), 87: (0, 105), 73: (0, 139), 31: (0, 106)},
  112: {12: (1, 57), 84: (1, 57), 78: (1, 57), 57: (1, 57), 34: (1, 57), 31: (1, 57), 77: (1, 57)},
  113: {12: (1, 58), 84: (1, 58), 78: (1, 58), 57: (1, 58), 34: (1, 58), 31: (1, 58), 77: (1, 58)},
  114: {12: (1, 56), 84: (1, 56), 78: (1, 56), 57: (1, 56), 34: (1, 56), 31: (1, 56), 77: (1, 56)},
  115: {83: (1, 92), 12: (1, 92), 84: (1, 92), 36: (1, 92), 78: (1, 92), 57: (1, 92), 34: (1, 92), 31: (1, 92), 77: (1, 92)},
  116: {36: (1, 31), 68: (0, 81), 69: (0, 82), 57: (0, 83), 71: (0, 85), 72: (0, 86), 73: (0, 87), 12: (0, 88), 74: (0, 89), 48: (0, 90), 75: (0, 91), 76: (0, 92), 77: (0, 93), 34: (0, 94), 78: (0, 95), 79: (0, 96), 70: (0, 140), 27: (0, 97), 81: (0, 99), 82: (0, 100), 83: (0, 101), 84: (0, 102), 85: (0, 103), 86: (0, 104), 87: (0, 105), 31: (0, 106)},
  117: {34: (0, 94), 68: (0, 81), 78: (0, 95), 69: (0, 82), 27: (0, 97), 12: (0, 88), 74: (0, 141), 57: (0, 83), 81: (0, 99), 82: (0, 100), 72: (0, 86), 73: (0, 87), 84: (0, 102), 48: (0, 90), 86: (0, 104), 87: (0, 105), 77: (0, 93), 31: (0, 106)},
  118: {12: (1, 46), 84: (1, 46), 78: (1, 46), 57: (1, 46), 34: (1, 46), 31: (1, 46), 77: (1, 46)},
  119: {12: (1, 48), 84: (1, 48), 78: (1, 48), 57: (1, 48), 34: (1, 48), 31: (1, 48), 77: (1, 48)},
  120: {12: (1, 49), 84: (1, 49), 78: (1, 49), 57: (1, 49), 34: (1, 49), 31: (1, 49), 77: (1, 49)},
  121: {12: (1, 45), 84: (1, 45), 78: (1, 45), 57: (1, 45), 34: (1, 45), 31: (1, 45), 77: (1, 45)},
  122: {34: (0, 94), 68: (0, 81), 78: (0, 95), 69: (0, 82), 27: (0, 97), 12: (0, 88), 57: (0, 83), 81: (0, 99), 72: (0, 86), 73: (0, 87), 82: (0, 142), 84: (0, 102), 48: (0, 90), 86: (0, 104), 87: (0, 105), 77: (0, 93), 31: (0, 106)},
  123: {12: (1, 47), 84: (1, 47), 78: (1, 47), 57: (1, 47), 34: (1, 47), 31: (1, 47), 77: (1, 47)},
  124: {12: (1, 44), 84: (1, 44), 78: (1, 44), 57: (1, 44), 34: (1, 44), 31: (1, 44), 77: (1, 44)},
  125: {34: (0, 94), 68: (0, 81), 78: (0, 95), 69: (0, 82), 74: (0, 89), 27: (0, 97), 12: (0, 88), 57: (0, 83), 81: (0, 99), 82: (0, 100), 71: (0, 143), 72: (0, 86), 73: (0, 87), 84: (0, 102), 48: (0, 90), 86: (0, 104), 87: (0, 105), 77: (0, 93), 31: (0, 106)},
  126: {34: (0, 94), 68: (0, 81), 78: (0, 95), 69: (0, 82), 74: (0, 89), 27: (0, 97), 12: (0, 88), 57: (0, 83), 81: (0, 99), 82: (0, 100), 71: (0, 85), 72: (0, 86), 75: (0, 91), 73: (0, 87), 84: (0, 102), 85: (0, 144), 48: (0, 90), 86: (0, 104), 87: (0, 105), 77: (0, 93), 31: (0, 106)},
  127: {20: (0, 145)},
  128: {83: (1, 33), 12: (1, 33), 84: (1, 33), 78: (1, 33), 36: (1, 33), 57: (1, 33), 34: (1, 33), 31: (1, 33), 77: (1, 33)},
  129: {72: (0, 146), 48: (0, 90), 12: (0, 70)},
  130: {14: (1, 29), 23: (1, 29)},
  131: {34: (0, 94), 68: (0, 147), 78: (0, 95), 69: (0, 82), 27: (0, 97), 12: (0, 88), 57: (0, 83), 81: (0, 99), 72: (0, 86), 73: (0, 87), 84: (0, 102), 48: (0, 90), 86: (0, 104), 87: (0, 105), 77: (0, 93), 31: (0, 106)},
  132: {12: (1, 52), 84: (1, 52), 78: (1, 52), 57: (1, 52), 34: (1, 52), 31: (1, 52), 77: (1, 52)},
  133: {12: (1, 53), 84: (1, 53), 78: (1, 53), 57: (1, 53), 34: (1, 53), 31: (1, 53), 77: (1, 53)},
  134: {60: (0, 148)},
  135: {16: (1, 60), 52: (1, 60), 53: (1, 60), 59: (1, 60), 60: (1, 60), 61: (1, 60), 54: (1, 60), 55: (1, 60), 62: (1, 60), 20: (1, 60), 63: (1, 60), 56: (1, 60), 57: (1, 60), 64: (1, 60), 65: (1, 60), 66: (1, 60), 58: (1, 60), 67: (1, 60)},
  136: {14: (1, 18), 23: (1, 18)},
  137: {50: (0, 149), 12: (0, 12), 45: (0, 80), 11: (0, 62)},
  138: {16: (1, 91), 15: (1, 91), 21: (1, 91)},
  139: {16: (1, 54), 52: (1, 54), 53: (1, 54), 59: (1, 54), 60: (1, 54), 61: (1, 54), 54: (1, 54), 55: (1, 54), 62: (1, 54), 20: (1, 54), 63: (1, 54), 56: (1, 54), 57: (1, 54), 64: (1, 54), 65: (1, 54), 66: (1, 54), 58: (1, 54), 67: (1, 54)},
  140: {83: (1, 93), 12: (1, 93), 84: (1, 93), 36: (1, 93), 78: (1, 93), 57: (1, 93), 34: (1, 93), 31: (1, 93), 77: (1, 93)},
  141: {16: (1, 40), 52: (1, 40), 20: (1, 40), 63: (1, 40), 60: (1, 40), 64: (1, 40), 55: (1, 40), 59: (0, 118), 54: (0, 119), 62: (0, 120), 61: (0, 121), 91: (0, 122), 66: (0, 123), 67: (0, 124)},
  142: {16: (1, 42), 52: (1, 42), 59: (1, 42), 60: (1, 42), 61: (1, 42), 54: (1, 42), 55: (1, 42), 62: (1, 42), 20: (1, 42), 63: (1, 42), 64: (1, 42), 66: (1, 42), 67: (1, 42), 92: (0, 131), 65: (0, 132), 57: (0, 133)},
  143: {16: (1, 39), 52: (1, 39), 20: (1, 39), 60: (1, 39), 64: (1, 39), 55: (1, 39), 63: (0, 117)},
  144: {16: (1, 36), 52: (1, 36), 20: (1, 36), 60: (1, 36)},
  145: {16: (1, 65), 52: (1, 65), 53: (1, 65), 59: (1, 65), 60: (1, 65), 61: (1, 65), 54: (1, 65), 55: (1, 65), 62: (1, 65), 20: (1, 65), 63: (1, 65), 56: (1, 65), 57: (1, 65), 64: (1, 65), 65: (1, 65), 66: (1, 65), 58: (1, 65), 67: (1, 65)},
  146: {20: (0, 150)},
  147: {16: (1, 50), 52: (1, 50), 59: (1, 50), 60: (1, 50), 61: (1, 50), 54: (1, 50), 55: (1, 50), 62: (1, 50), 20: (1, 50), 63: (1, 50), 57: (1, 50), 64: (1, 50), 65: (1, 50), 66: (1, 50), 67: (1, 50), 89: (0, 111), 56: (0, 112), 58: (0, 113), 53: (0, 114)},
  148: {34: (0, 94), 68: (0, 81), 77: (0, 93), 78: (0, 95), 69: (0, 82), 74: (0, 89), 27: (0, 97), 12: (0, 88), 57: (0, 83), 81: (0, 99), 82: (0, 100), 71: (0, 85), 72: (0, 86), 75: (0, 91), 73: (0, 87), 84: (0, 102), 48: (0, 90), 86: (0, 104), 87: (0, 105), 85: (0, 151), 31: (0, 106)},
  149: {16: (1, 90), 15: (1, 90), 21: (1, 90)},
  150: {52: (1, 72), 53: (1, 72), 54: (1, 72), 55: (1, 72), 20: (1, 72), 56: (1, 72), 57: (1, 72), 58: (1, 72), 16: (1, 72), 59: (1, 72), 60: (1, 72), 61: (1, 72), 62: (1, 72), 63: (1, 72), 64: (1, 72), 65: (1, 72), 66: (1, 72), 67: (1, 72)},
  151: {52: (0, 152)},
  152: {34: (0, 94), 68: (0, 81), 78: (0, 95), 69: (0, 82), 74: (0, 89), 27: (0, 97), 12: (0, 88), 57: (0, 83), 81: (0, 99), 82: (0, 100), 71: (0, 85), 72: (0, 86), 75: (0, 91), 73: (0, 87), 84: (0, 102), 48: (0, 90), 86: (0, 104), 85: (0, 153), 87: (0, 105), 77: (0, 93), 31: (0, 106)},
  153: {16: (1, 71), 20: (1, 71)},
}
TOKEN_TYPES = (
{0: 'PROGRAM',
 1: 'enum_set_decl',
 2: 'enum_decl',
 3: 'ENUM',
 4: '__anon_star_0',
 5: 'ENUMSET',
 6: 'VALUE',
 7: 'type_decl',
 8: 'type_decls',
 9: 'start',
 10: 'value_decl',
 11: 'type_name',
 12: 'NAME',
 13: 'program_decl',
 14: '$END',
 15: 'LBRACE',
 16: 'SEMICOLON',
 17: 'enum_body',
 18: '__ANON_0',
 19: 'LSQB',
 20: 'RPAR',
 21: 'COMMA',
 22: 'value_body',
 23: 'FUNC',
 24: 'func_decls',
 25: 'func_decl',
 26: '__anon_star_3',
 27: 'func_name',
 28: 'STRLIT',
 29: 'enum_item',
 30: 'enum_items',
 31: 'INT',
 32: 'value_item',
 33: 'value_items',
 34: 'LPAR',
 35: 'COLON',
 36: 'RBRACE',
 37: '__anon_star_1',
 38: 'RSQB',
 39: '__anon_star_2',
 40: 'type_names',
 41: 'BOOL',
 42: '__ANON_8',
 43: 'expr_type_name',
 44: 'func_lhs',
 45: 'opt_arg',
 46: 'func_body',
 47: '__anon_star_6',
 48: 'var_name',
 49: 'func_constraints',
 50: 'func_rhs',
 51: 'func_rhss',
 52: 'ELSE',
 53: 'SLASH',
 54: 'MORETHAN',
 55: '__ANON_2',
 56: 'STAR',
 57: 'MINUS',
 58: 'PERCENT',
 59: '__ANON_7',
 60: 'THEN',
 61: '__ANON_6',
 62: 'LESSTHAN',
 63: '__ANON_3',
 64: '__ANON_1',
 65: 'PLUS',
 66: '__ANON_4',
 67: '__ANON_5',
 68: 'factor_expr',
 69: 'property_expr',
 70: 'func_constraint_item',
 71: 'and_expr',
 72: 'var_expr',
 73: 'unary_expr',
 74: 'cmp_expr',
 75: 'or_expr',
 76: 'cond_expr',
 77: 'FALSE',
 78: 'TRUE',
 79: 'expr',
 80: 'func_constraint_items',
 81: 'atom_expr',
 82: 'term_expr',
 83: 'IF',
 84: 'BANG',
 85: 'imply_expr',
 86: 'const_expr',
 87: 'unary_op',
 88: '__anon_star_4',
 89: 'factor_op',
 90: '__anon_star_5',
 91: 'cmp_op',
 92: 'term_op'}
)
parse_table.states = {s: {TOKEN_TYPES[t]: (a, RULES[x] if a is Reduce else x) for t, (a, x) in acts.items()}
                      for s, acts in STATES.items()}
parse_table.start_state = 0
parse_table.end_state = 18
class Lark_StandAlone:
  def __init__(self, transformer=None, postlex=None):
     callback = parse_tree_builder.create_callback(transformer=transformer)
     callbacks = {rule: getattr(callback, rule.alias or rule.origin, None) for rule in RULES.values()}
     self.parser = _Parser(parse_table, callbacks)
     self.postlex = postlex
  def parse(self, stream):
     tokens = lex(stream)
     sps = CON_LEXER.set_parser_state
     if self.postlex: tokens = self.postlex.process(tokens)
     return self.parser.parse(tokens, sps)
