# First, specify the types that will be used
enum ColInt {
  "1", "2", "3"
}

enum SmallInt {
  "1", "2", "3"
}

enumset ColList[3] {
  "2", "3", "5"
}

enum Aggr {
  "min", "max", "sum"
}

enum NumFunc {
  "/"
}
enum BoolFunc {
  "==", ">", "<"
}

value Table {
	col: int;
	row: int;
}

value Empty;

# Next, specify the input/output of the synthesized program
program Morpheus(Table) -> Table;

# Finally, specify the production rules
func empty: Empty -> Empty;

func select: Table r -> Table a, ColList b {
  row(r) == row(a);
  col(r) < col(a);
}

func unite: Table r -> Table a, ColInt b, ColInt c {
  row(r) == row(a);
  col(r) == col(a) - 1;
}

func group_by: Table r -> Table a, ColList b {
  row(r) == row(a);
  col(r) == col(a);
}

func gather: Table r -> Table a, ColList b {
  row(r) >= row(a);
  col(r) <= col(a);
}

func spread: Table r -> Table a, ColInt b, ColInt c {
  row(r) <= row(a);
  col(r) >= col(a);
}

func separate: Table r -> Table a, ColInt b {
  row(r) == row(a);
  col(r) == col(a) + 1;
}

func mutate: Table r -> Table a, NumFunc b, ColInt c, ColInt d {
  row(r) == row(a);
  col(r) == col(a) + 1;
}

func filter: Table r -> Table a, BoolFunc b, ColInt c, SmallInt d {
  row(r) < row(a);
  col(r) == col(a);
}

func summarise: Table r -> Table a, Aggr b, ColInt c {
  row(r) < row(a);
  col(r) <= col(a) + 1;
}

func inner_join: Table r -> Table a, Table b {
  col(r) < col(a) + col(b);
}

predicate is_parent(summarise, group_by, 1233);
predicate is_parent(select, mutate, 250);
predicate is_parent(select, filter, 216);
predicate is_parent(mutate, gather, 200);
predicate is_parent(filter, filter, 189);
predicate is_parent(filter, mutate, 183);
predicate is_parent(select, gather, 164);
predicate is_parent(spread, mutate, 162);
predicate occurs(mutate, 160);
predicate is_parent(mutate, filter, 155);
predicate is_parent(summarise, filter, 153);
predicate is_parent(filter, gather, 150);
predicate is_parent(spread, gather, 136);
predicate is_parent(spread, separate, 115);
predicate is_parent(mutate, select, 111);
predicate is_parent(spread, select, 104);
predicate is_parent(separate, gather, 100);
predicate is_parent(mutate, inner_join, 95);
predicate is_parent(spread, unite, 89);
predicate is_parent(summarise, mutate, 89);
predicate is_parent(summarise, select, 87);
predicate occurs(filter, 85);
predicate is_parent(select, inner_join, 82);
predicate occurs(select, 74);
predicate is_parent(mutate, separate, 74);
predicate is_parent(unite, gather, 68);
predicate is_parent(select, spread, 67);
predicate is_parent(filter, inner_join, 65);
predicate is_parent(mutate, spread, 62);
predicate is_parent(mutate, summarise, 60);
predicate is_parent(spread, filter, 58);
predicate is_parent(spread, summarise, 57);
predicate is_parent(inner_join, mutate, 54);
predicate is_parent(inner_join, mutate, 54);
predicate is_parent(inner_join, select, 48);
predicate is_parent(inner_join, select, 48);
predicate is_parent(select, separate, 47);
predicate is_parent(filter, separate, 45);
predicate is_parent(inner_join, gather, 45);
predicate is_parent(inner_join, gather, 45);
predicate is_parent(mutate, unite, 43);
predicate is_parent(inner_join, separate, 42);
predicate is_parent(inner_join, separate, 42);
predicate is_parent(gather, mutate, 40);
predicate is_parent(filter, summarise, 39);
predicate is_parent(select, summarise, 38);
predicate is_parent(summarise, inner_join, 36);
predicate is_parent(summarise, gather, 32);
predicate is_parent(inner_join, filter, 32);
predicate is_parent(inner_join, filter, 32);
predicate occurs(summarise, 30);
predicate is_parent(separate, mutate, 29);
predicate is_parent(gather, select, 28);
predicate is_parent(inner_join, summarise, 24);
predicate is_parent(inner_join, summarise, 24);
predicate is_parent(filter, spread, 22);
predicate is_parent(gather, separate, 21);
predicate is_parent(summarise, spread, 21);
predicate is_parent(gather, filter, 19);
predicate is_parent(select, unite, 19);
predicate occurs(spread, 18);
predicate is_parent(unite, mutate, 18);
predicate is_parent(separate, filter, 18);
predicate occurs(inner_join, 17);
predicate is_parent(inner_join, spread, 17);
predicate is_parent(inner_join, spread, 17);
predicate is_parent(gather, inner_join, 16);
predicate is_parent(unite, separate, 14);
predicate is_parent(unite, unite, 13);
predicate is_parent(spread, inner_join, 13);
predicate occurs(gather, 13);
predicate is_parent(separate, select, 12);
predicate is_parent(unite, filter, 11);
predicate is_parent(unite, select, 11);
predicate is_parent(gather, spread, 10);
predicate is_parent(filter, unite, 9);
predicate is_parent(summarise, separate, 9);
predicate is_parent(gather, summarise, 9);
predicate is_parent(separate, unite, 8);
predicate is_parent(unite, inner_join, 8);
predicate is_parent(separate, summarise, 6);
predicate is_parent(summarise, unite, 6);
predicate is_parent(separate, spread, 6);
predicate is_parent(unite, spread, 5);
predicate occurs(separate, 5);
predicate is_parent(unite, summarise, 4);
predicate is_parent(gather, unite, 4);
predicate is_parent(inner_join, unite, 2);
predicate is_parent(inner_join, unite, 2);
predicate is_parent(separate, inner_join, 1);
predicate occurs(unite, 1);